import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  ActivityIndicator,
  Image,
  Switch,
  Platform,
  Modal,
  FlatList,
  Dimensions,
  SafeAreaView,
  StatusBar,
  KeyboardAvoidingView,
} from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { RouteProp, useNavigation, useRoute } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { 
  launchImageLibrary, 
  launchCamera, 
  MediaType,
  ImagePickerOptions,
  ImagePickerResponse
} from 'react-native-image-picker';
import DateTimePicker from '@react-native-community/datetimepicker';
import { compressLogoImage, compressShopImage, compressAvatarImage } from '../../utils/imageCompression';

// Import our Supabase service and auth context
import { authService } from '../../lib/supabase/index';
import normalizedShopService, { supabase } from '../../lib/supabase/normalized';
import integratedShopService from '../../lib/supabase/integrated';
import { useAuth } from '../../navigation/AppNavigator';

const { width } = Dimensions.get('window');

// Type definitions
type ProviderStackParamList = {
  ShopDetails: {
    shop?: Shop;
    onSave?: (shop: Shop) => void;
  };
  ProviderTabs: {
    screen?: 'ProviderHomeTab' | 'QueueTab' | 'ServicesTab' | 'EarningsTab' | 'ProfileTab';
  };
};

type ShopDetailsRouteProp = RouteProp<ProviderStackParamList, 'ShopDetails'>;
type ShopDetailsNavigationProp = StackNavigationProp<ProviderStackParamList, 'ShopDetails'>;

export interface Staff {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: string;
  specialties: string[];
  avatar_url?: string;
  bio?: string;
  experience_years?: number;
  is_active: boolean;
  created_at?: string;
}

export interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  image?: string;
  discount?: Discount;
  assigned_staff?: string[];
  is_active: boolean;
}

export interface Discount {
  id: string;
  type: 'percentage' | 'fixed' | 'bogo' | 'package';
  value: number;
  description: string;
  min_amount?: number;
  max_discount?: number;
  start_date: string;
  end_date: string;
  is_active: boolean;
  usage_limit?: number;
  used_count: number;
  applicable_services?: string[];
  conditions?: string;
}

export interface BusinessHours {
  day: string;
  isOpen: boolean;
  openTime: string;
  closeTime: string;
  isAlwaysOpen?: boolean;
}

export interface SpecialDay {
  id: string;
  date: string;
  name: string;
  type: 'holiday' | 'special_hours' | 'closed' | 'event';
  isOpen: boolean;
  openTime?: string;
  closeTime?: string;
  description?: string;
  recurring?: 'none' | 'weekly' | 'monthly' | 'yearly';
}

export interface Shop {
  id: string;
  name: string;
  address: string;
  city: string;
  state: string;
  country: string;
  phone: string;
  email: string;
  description: string;
  category: string;
  website_url?: string;
  image_url?: string;
  images?: string[];
  logo_url?: string;
  business_hours: BusinessHours[];
  special_days: SpecialDay[];
  timezone: string;
  advance_booking_days: number;
  slot_duration: number;
  buffer_time: number;
  auto_approval: boolean;
  is_active: boolean;
  services?: Service[];
  discounts?: Discount[];
  staff?: Staff[];
  created_at?: string;
  updated_at?: string;
}

// Service categories
const SERVICE_CATEGORIES = [
  'Beauty & Wellness', 'Hair Salon', 'Spa & Wellness', 'Nail Care',
  'Massage Therapy', 'Skincare', 'Fitness & Health', 'Home Services',
  'Auto Services', 'Pet Care', 'Food & Dining', 'Education', 'Other'
];

// Common role suggestions (for placeholder/examples)
const ROLE_SUGGESTIONS = [
  'Manager', 'Technician', 'Specialist', 'Assistant', 'Consultant', 
  'Cleaner', 'Supervisor', 'Coordinator', 'Expert', 'Professional'
];

// Common specialty suggestions (for placeholder/examples)
const SPECIALTY_SUGGESTIONS = [
  'Deep Cleaning', 'Window Cleaning', 'Carpet Cleaning', 'Office Cleaning',
  'Residential Cleaning', 'Commercial Cleaning', 'Maintenance', 'Repair Work',
  'Installation', 'Consultation', 'Quality Control', 'Customer Service'
];

// Discount types
const DISCOUNT_TYPES = [
  { id: 'percentage', name: 'Percentage Off', icon: 'calculator-outline', description: 'e.g., 20% off' },
  { id: 'fixed', name: 'Fixed Amount', icon: 'cash-outline', description: 'e.g., $10 off' },
  { id: 'bogo', name: 'Buy One Get One', icon: 'gift-outline', description: 'Special offers' },
  { id: 'package', name: 'Package Deal', icon: 'bag-outline', description: 'Bundle discounts' }
];

// Days of the week
const DAYS_OF_WEEK = [
  'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
];

// Special day types
const SPECIAL_DAY_TYPES = [
  { id: 'holiday', name: 'Public Holiday', icon: 'calendar-outline', color: '#EF4444' },
  { id: 'special_hours', name: 'Special Hours', icon: 'time-outline', color: '#F59E0B' },
  { id: 'closed', name: 'Closed', icon: 'close-circle-outline', color: '#6B7280' },
  { id: 'event', name: 'Special Event', icon: 'star-outline', color: '#8B5CF6' }
];

// Recurring options
const RECURRING_OPTIONS = [
  { id: 'none', name: 'One-time only' },
  { id: 'weekly', name: 'Every week' },
  { id: 'monthly', name: 'Every month' },
  { id: 'yearly', name: 'Every year' }
];

// Timezones (simplified)
const TIMEZONES = [
  'Europe/Stockholm', 'Europe/London', 'Europe/Paris', 'Europe/Berlin',
  'America/New_York', 'America/Los_Angeles', 'Asia/Tokyo', 'Australia/Sydney'
];

const ShopDetailsScreen: React.FC = () => {
  const navigation = useNavigation<ShopDetailsNavigationProp>();
  const route = useRoute<ShopDetailsRouteProp>();
  const { user } = useAuth();

  // Set navigation options
  React.useLayoutEffect(() => {
    navigation.setOptions({
      title: existingShop ? 'Edit Shop' : 'Create Shop',
      headerStyle: { backgroundColor: '#FEFCE8' },
      headerTintColor: '#1F2937',
      headerTitleStyle: { fontWeight: '600' },
      headerRight: () => (
        <TouchableOpacity
          style={[styles.headerSaveButton, isSaving && styles.saveButtonDisabled]}
          onPress={handleSave}
          disabled={isSaving}
        >
          {isSaving ? (
            <ActivityIndicator size="small" color="#FFFFFF" />
          ) : (
            <Text style={styles.headerSaveButtonText}>Save</Text>
          )}
        </TouchableOpacity>
      ),
    });
  }, [navigation, existingShop, isSaving]);
  
  const existingShop = route.params?.shop;
  const onSave = route.params?.onSave;
  const isEditing = !!existingShop;
  
  // State to track if we've loaded data from the database
  const [hasLoadedData, setHasLoadedData] = useState(false);

  // Debug: Log the existing shop data structure and test storage
  React.useEffect(() => {
    if (existingShop) {
      console.log('🔍 Existing shop data structure:', JSON.stringify(existingShop, null, 2));
      console.log('🔍 Business hours:', existingShop.business_hours);
      console.log('🔍 Images:', existingShop.images);
      console.log('🔍 Services:', existingShop.services);
      console.log('🔍 Staff:', existingShop.staff);
    }

    // Test storage connection when component loads (non-blocking)
    const testStorage = async () => {
      try {
        console.log('🧪 Running storage test...');
        const result = await integratedShopService.setupStorage();
        console.log('🧪 Storage test result:', result);
      } catch (error) {
        console.log('🧪 Storage test failed (non-blocking):', error);
      }
    };
    
    testStorage();
  }, [existingShop]);

  // Helper function to deduplicate arrays by ID
  const deduplicateById = <T extends { id: string }>(array: T[]): T[] => {
    const seen = new Set<string>();
    return array.filter(item => {
      if (seen.has(item.id)) {
        return false;
      }
      seen.add(item.id);
      return true;
    });
  };

  // Function to refresh shop data from database for editing mode  
  const refreshShopData = async (source = 'manual') => {
    if (!isEditing || !existingShop?.id) {
      return;
    }
    
    setIsRefreshing(true);
    
    try {
        // Try to get shop data using the normalized service
        const result = await normalizedShopService.getShopById(existingShop.id);
        
        // If normalized service fails, try direct queries for each data type
        if (!result.success) {
          
          try {
            // Load staff data
            const { data: staffData, error: staffError } = await supabase
              .from('shop_staff')
              .select('*')
              .eq('shop_id', existingShop.id)
              .eq('is_active', true)
              .order('created_at', { ascending: false });

            // Load services data
            const { data: servicesData, error: servicesError } = await supabase
              .from('shop_services')
              .select('*')
              .eq('shop_id', existingShop.id)
              .eq('is_active', true)
              .order('created_at', { ascending: false });

            // Load discounts data
            const { data: discountsData, error: discountsError } = await supabase
              .from('shop_discounts')
              .select('*')
              .eq('shop_id', existingShop.id)
              .eq('is_active', true)
              .order('created_at', { ascending: false });

            console.log('✅ Direct queries completed:');
            console.log('  - Staff:', !staffError ? staffData?.length || 0 : 'ERROR');
            console.log('  - Services:', !servicesError ? servicesData?.length || 0 : 'ERROR');
            console.log('  - Discounts:', !discountsError ? discountsData?.length || 0 : 'ERROR');
            
            // Update shop state with all the data we could fetch (deduplicated)
            setShop(prev => ({
              ...prev,
              staff: !staffError ? deduplicateById(staffData || []) : prev.staff,
              services: !servicesError ? deduplicateById(servicesData || []) : prev.services,
              discounts: !discountsError ? deduplicateById(discountsData || []) : prev.discounts
            }));
            
            return; // Exit early after direct queries
          } catch (directError) {
            console.error('❌ Direct queries error:', directError);
            // Continue to check normalized service result below
          }
        }
        if (result.success && result.data) {
          console.log('✅ Shop data refreshed successfully');
          console.log('  - Staff count:', result.data.staff?.length || 0);
          console.log('  - Services count:', result.data.services?.length || 0);
          console.log('  - Discounts count:', result.data.discounts?.length || 0);
          
          // Log the actual staff data to see what we're getting
          if (result.data.staff && result.data.staff.length > 0) {
            console.log('📋 Staff data from database:', JSON.stringify(result.data.staff, null, 2));
          }
          
          setShop(prev => {
            const updatedShop = {
              ...prev,
              staff: deduplicateById(result.data!.staff || []),
              services: deduplicateById(result.data!.services || []),
              discounts: deduplicateById(result.data!.discounts || [])
            };
            
            console.log('🏪 Shop state updated with fresh data (deduplicated):');
            console.log('  - Previous staff count:', prev.staff?.length || 0);
            console.log('  - New staff count:', updatedShop.staff?.length || 0);
            
            return updatedShop;
          });
        } else {
          console.error('❌ Failed to refresh shop data:', result.error);
          console.log('ℹ️ Attempting fallback with empty arrays to ensure UI shows something...');
          
          // Set empty arrays if no data is available at all
          setShop(prev => ({
            ...prev,
            staff: prev.staff?.length > 0 ? prev.staff : [],
            services: prev.services?.length > 0 ? prev.services : [],
            discounts: prev.discounts?.length > 0 ? prev.discounts : []
          }));
        }
      } catch (error) {
        console.error('❌ Error refreshing shop data:', error);
        // Keep existing data on error
      } finally {
        setIsRefreshing(false);
        setHasLoadedData(true);  // Mark as loaded after any refresh
      }
  };
  

  // hasLoadedData state is declared above
  
  // AUTO-LOAD DATA: Load immediately when we detect editing mode
  React.useEffect(() => {
    if (!isEditing || !existingShop?.id) return;
    
    console.log('🆕 AUTO-LOAD: Detected editing mode, loading data NOW!');
    console.log('  - Shop ID:', existingShop.id);
    console.log('  - Current staff count:', shop.staff.length);
    console.log('  - Current services count:', shop.services.length);
    console.log('  - Current discounts count:', shop.discounts.length);
    
    // Create an async function to load data
    const autoLoadData = async () => {
      console.log('🚀 AUTO-LOAD: Starting data fetch...');
      
      try {
        // Method 1: Try the normalized service
        const shopResult = await normalizedShopService.getShopById(existingShop.id);
        
        if (shopResult.success && shopResult.data) {
          console.log('✅ AUTO-LOAD: Success via normalized service!');
          console.log('  - Staff found:', shopResult.data.staff?.length || 0);
          console.log('  - Services found:', shopResult.data.services?.length || 0);
          console.log('  - Discounts found:', shopResult.data.discounts?.length || 0);
          
          // Update the state (deduplicated)
          setShop(prev => {
            const updated = {
              ...prev,
              staff: deduplicateById(shopResult.data!.staff || []),
              services: deduplicateById(shopResult.data!.services || []),
              discounts: deduplicateById(shopResult.data!.discounts || [])
            };
            console.log('🔄 AUTO-LOAD: State updated with new data (deduplicated)');
            return updated;
          });
          
          setHasLoadedData(true);
          return; // Success, exit early
        }
        
        // Method 2: Direct table queries as fallback
        console.log('⚠️ AUTO-LOAD: Normalized service failed, trying direct queries...');
        
        const [staffRes, servicesRes, discountsRes] = await Promise.all([
          supabase.from('shop_staff').select('*').eq('shop_id', existingShop.id).eq('is_active', true).order('created_at', { ascending: false }),
          supabase.from('shop_services').select('*').eq('shop_id', existingShop.id).eq('is_active', true).order('created_at', { ascending: false }),
          supabase.from('shop_discounts').select('*').eq('shop_id', existingShop.id).eq('is_active', true).order('created_at', { ascending: false })
        ]);
        
        console.log('📦 AUTO-LOAD: Direct query results:');
        console.log('  - Staff query:', staffRes.error ? 'ERROR' : `${staffRes.data?.length || 0} records`);
        console.log('  - Services query:', servicesRes.error ? 'ERROR' : `${servicesRes.data?.length || 0} records`);
        console.log('  - Discounts query:', discountsRes.error ? 'ERROR' : `${discountsRes.data?.length || 0} records`);
        
        // Update state with whatever data we got (deduplicated)
        setShop(prev => {
          const updated = {
            ...prev,
            staff: deduplicateById(staffRes.data || []),
            services: deduplicateById(servicesRes.data || []),
            discounts: deduplicateById(discountsRes.data || [])
          };
          console.log('🔄 AUTO-LOAD: State updated with direct query data (deduplicated)');
          return updated;
        });
        
        setHasLoadedData(true);
        
      } catch (error) {
        console.error('❌ AUTO-LOAD: Fatal error:', error);
        // Even on error, mark as loaded to prevent infinite attempts
        setHasLoadedData(true);
      }
    };
    
    // Execute the auto-load immediately
    autoLoadData();
    
    // FAILSAFE: Force a refresh after 1 second if data is still empty
    const failsafeTimer = setTimeout(() => {
      if (shop.staff.length === 0 && shop.services.length === 0 && shop.discounts.length === 0) {
        console.log('⚠️ FAILSAFE: No data loaded after 1s, forcing refresh...');
        refreshShopData('failsafe');
      }
    }, 1000);
    
    return () => clearTimeout(failsafeTimer);
    
  }, [isEditing, existingShop?.id]); // Remove hasLoadedData from dependencies!

  // Tab refresh: Refresh data when switching to staff, services, or discounts tabs
  React.useEffect(() => {
    if (!isEditing || !existingShop?.id) return;
    if (!['staff', 'services', 'discounts'].includes(activeTab)) return;
    if (!hasLoadedData) return; // Only refresh after initial load
    
    console.log(`🆕 TAB-REFRESH: Switched to ${activeTab} tab`);
    refreshShopData('tab-switch');
    
  }, [activeTab]); // Simplified dependencies

  // Create default business hours
  const createDefaultBusinessHours = (): BusinessHours[] => {
    return DAYS_OF_WEEK.map(day => ({
      day,
      isOpen: ['Saturday', 'Sunday'].includes(day) ? false : true,
      openTime: '09:00',
      closeTime: '17:00'
    }));
  };

  // Main shop state  
  const [shop, setShop] = useState<Shop>(() => {
    const initialShop = {
      id: existingShop?.id || '',
      name: existingShop?.name || '',
      address: existingShop?.address || '',
      city: existingShop?.city || '',
      state: existingShop?.state || '',
      country: existingShop?.country || 'Sweden',
      phone: existingShop?.phone || '',
      email: existingShop?.email || '',
      description: existingShop?.description || '',
      category: existingShop?.category || SERVICE_CATEGORIES[0],
      website_url: existingShop?.website_url || '',
      image_url: existingShop?.image_url || '',
      images: existingShop?.images || [],
      logo_url: existingShop?.logo_url || '',
      business_hours: existingShop?.business_hours || createDefaultBusinessHours(),
      special_days: existingShop?.special_days || [],
      timezone: existingShop?.timezone || 'Europe/Stockholm',
      advance_booking_days: existingShop?.advance_booking_days || 30,
      slot_duration: existingShop?.slot_duration || 60,
      buffer_time: existingShop?.buffer_time || 15,
      auto_approval: existingShop?.auto_approval ?? true,
      is_active: existingShop?.is_active ?? true,
      services: [],  // Always start with empty arrays
      discounts: [],  // Data will be loaded from database
      staff: []  // This ensures fresh data is always loaded
    };
    
    console.log('🏪 Initial shop state created:');
    console.log('  - ID:', initialShop.id);
    console.log('  - Is editing:', !!existingShop);
    console.log('  - Initial staff count:', initialShop.staff.length);
    console.log('  - Initial services count:', initialShop.services.length);
    console.log('  - Initial discounts count:', initialShop.discounts.length);
    
    return initialShop;
  });

  // UI state
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [dataLoaded, setDataLoaded] = useState(false);
  const [activeTab, setActiveTab] = useState<'basic' | 'schedule' | 'staff' | 'services' | 'discounts' | 'settings'>('basic');
  
  // Upload progress state
  const [uploadProgress, setUploadProgress] = useState({
    isUploading: false,
    currentImage: 0,
    totalImages: 0,
    currentImageName: '',
    uploadedImages: 0,
    message: ''
  });
  
  // Debug: Log progress state changes
  React.useEffect(() => {
    console.log('🎯 Upload progress state changed:', uploadProgress);
  }, [uploadProgress]);
  
  // Modal states
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [showTimezoneModal, setShowTimezoneModal] = useState(false);
  const [showServiceModal, setShowServiceModal] = useState(false);
  const [showDiscountModal, setShowDiscountModal] = useState(false);
  const [showSpecialDayModal, setShowSpecialDayModal] = useState(false);
  const [showStaffModal, setShowStaffModal] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showTimePicker, setShowTimePicker] = useState(false);
  const [showCustomTimePicker, setShowCustomTimePicker] = useState(false);
  
  // Form states
  const [editingService, setEditingService] = useState<Service | null>(null);
  const [editingDiscount, setEditingDiscount] = useState<Discount | null>(null);
  const [editingSpecialDay, setEditingSpecialDay] = useState<SpecialDay | null>(null);
  const [editingStaff, setEditingStaff] = useState<Staff | null>(null);
  const [editingTimeSlot, setEditingTimeSlot] = useState<{day: string, type: 'open' | 'close'} | null>(null);
  const [tempDate, setTempDate] = useState(new Date());
  const [imageUploadType, setImageUploadType] = useState<'shop' | 'logo' | 'staff'>('shop');
  const [selectedImageIndex, setSelectedImageIndex] = useState<number>(0);
  
  // Refs for critical inputs
  const shopNameRef = useRef<TextInput>(null);
  const shopAddressRef = useRef<TextInput>(null);
  const shopPhoneRef = useRef<TextInput>(null);
  const shopEmailRef = useRef<TextInput>(null);
  
  // Store the actual text values separately to bypass React state issues
  const formValues = useRef({
    name: existingShop?.name || '',
    description: existingShop?.description || '',
    address: existingShop?.address || '',
    city: existingShop?.city || '',
    state: existingShop?.state || '',
    country: existingShop?.country || 'Sweden',
    phone: existingShop?.phone || '',
    email: existingShop?.email || ''
  });

  // Service form state
  const [serviceForm, setServiceForm] = useState<Partial<Service>>({
    name: '', description: '', price: 0, duration: 60, category: '', assigned_staff: [], is_active: true
  });

  // Staff form state
  const [staffForm, setStaffForm] = useState<Partial<Staff>>({
    name: '', 
    email: '', 
    phone: '', 
    role: '', 
    specialties: [], 
    bio: '', 
    experience_years: 0, 
    is_active: true,
    avatar_url: undefined
  });
  
  // Staff specialty input
  const [newSpecialty, setNewSpecialty] = useState('');

  // Discount form state
  const [discountForm, setDiscountForm] = useState<Partial<Discount>>({
    type: 'percentage', value: 0, description: '',
    start_date: new Date().toISOString().split('T')[0],
    end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    is_active: true, used_count: 0
  });

  // Special day form state
  const [specialDayForm, setSpecialDayForm] = useState<Partial<SpecialDay>>({
    date: new Date().toISOString().split('T')[0],
    name: '', type: 'holiday', isOpen: false,
    openTime: '09:00', closeTime: '17:00',
    description: '', recurring: 'none'
  });

  // Load complete shop data if editing
  useEffect(() => {
    const loadCompleteShopData = async () => {
      if (isEditing && existingShop && existingShop.id) {
        console.log('🔄 Loading complete shop data for edit mode...');
        setIsLoading(true);
        
        try {
          // Try to fetch complete shop data from database
          const response = await authService.getProviderBusinesses();
          if (response.success && response.data) {
            const completeShop = response.data.find((shop: any) => shop.id === existingShop.id);
            if (completeShop) {
              console.log('✅ Found complete shop data:', completeShop);
              
              // Map the complete shop data to our expected format
              const mappedShop = {
                ...existingShop, // Start with the basic data
                // Override with complete data if available
                images: completeShop.images || [],
                services: completeShop.services || [],
                staff: completeShop.staff || [],
                business_hours: completeShop.business_hours || existingShop.business_hours || createDefaultBusinessHours(),
                special_days: completeShop.special_days || [],
                discounts: completeShop.discounts || [],
                logo_url: completeShop.logo_url || existingShop.logo_url || '',
                timezone: completeShop.timezone || existingShop.timezone || 'Europe/Stockholm',
                advance_booking_days: completeShop.advance_booking_days || existingShop.advance_booking_days || 30,
                slot_duration: completeShop.slot_duration || existingShop.slot_duration || 60,
                buffer_time: completeShop.buffer_time || existingShop.buffer_time || 15,
                auto_approval: completeShop.auto_approval ?? existingShop.auto_approval ?? true,
                // Location fields
                city: completeShop.city || existingShop.city || '',
                state: completeShop.state || existingShop.state || '',
                country: completeShop.country || existingShop.country || 'Sweden',
              };
              
              setShop(mappedShop);
              // Also update formValues ref
              formValues.current = {
                name: mappedShop.name || '',
                description: mappedShop.description || '',
                address: mappedShop.address || '',
                city: mappedShop.city || '',
                state: mappedShop.state || '',
                country: mappedShop.country || 'Sweden',
                phone: mappedShop.phone || '',
                email: mappedShop.email || ''
              };
            } else {
              console.log('⚠️ Complete shop data not found, using basic data');
              setShop(existingShop);
              // Also update formValues ref
              formValues.current = {
                name: existingShop.name || '',
                description: existingShop.description || '',
                address: existingShop.address || '',
                city: existingShop.city || '',
                state: existingShop.state || '',
                country: existingShop.country || 'Sweden',
                phone: existingShop.phone || '',
                email: existingShop.email || ''
              };
            }
          } else {
            console.log('⚠️ Failed to fetch complete shop data, using basic data');
            setShop(existingShop);
            // Also update formValues ref
            formValues.current = {
              name: existingShop.name || '',
              description: existingShop.description || '',
              address: existingShop.address || '',
              phone: existingShop.phone || '',
              email: existingShop.email || ''
            };
          }
        } catch (error) {
          console.error('❌ Error loading complete shop data:', error);
          setShop(existingShop);
          // Also update formValues ref
          formValues.current = {
            name: existingShop.name || '',
            description: existingShop.description || '',
            address: existingShop.address || '',
            phone: existingShop.phone || '',
            email: existingShop.email || ''
          };
        } finally {
          setIsLoading(false);
        }
      } else if (isEditing && existingShop) {
        setShop(existingShop);
        // Also update formValues ref
        formValues.current = {
          name: existingShop.name || '',
          description: existingShop.description || '',
          address: existingShop.address || '',
          phone: existingShop.phone || '',
          email: existingShop.email || ''
        };
      }
    };

    loadCompleteShopData();
  }, [isEditing, existingShop]);

  // More robust validation that uses formValues ref to bypass state timing issues
  const validateBasicInfo = useCallback((): boolean => {
    console.log('🔍 Validation check - State value:', shop.name);
    console.log('🔍 Validation check - FormValues ref value:', formValues.current.name);
    
    // Use the formValues ref as the primary source of truth, with fallback to state
    const currentName = formValues.current.name || shop.name || '';
    const trimmedName = currentName.trim();
    
    console.log('🔍 Using formValues.current.name:', currentName);
    console.log('🔍 Trimmed name:', trimmedName);
    console.log('🔍 Trimmed name length:', trimmedName.length);
    
    if (!trimmedName || trimmedName.length === 0) {
      console.log('❌ Validation failed - shop name is empty');
      setActiveTab('basic'); // Switch to basic tab to show the error
      Alert.alert('Validation Error', 'Shop name is required');
      return false;
    }
    
    console.log('✅ Validation passed - shop name is:', trimmedName);
    
    // Check address validation using formValues
    const currentAddress = formValues.current.address || shop.address || '';
    const trimmedAddress = currentAddress.trim();
    console.log('🔍 Address validation - FormValues ref value:', currentAddress);
    console.log('🔍 Address trimmed:', trimmedAddress);
    
    if (!trimmedAddress || trimmedAddress.length === 0) {
      console.log('❌ Address validation failed - address is empty');
      Alert.alert('Validation Error', 'Address is required');
      return false;
    }
    
    console.log('✅ Address validation passed - address is:', trimmedAddress);
    
    // Check phone validation using formValues
    const currentPhone = formValues.current.phone;
    const trimmedPhone = currentPhone.trim();
    if (!trimmedPhone) {
      Alert.alert('Validation Error', 'Phone number is required');
      return false;
    }
    
    // Check email validation using formValues
    const currentEmail = formValues.current.email;
    const trimmedEmail = currentEmail.trim();
    if (!trimmedEmail || !trimmedEmail.includes('@')) {
      Alert.alert('Validation Error', 'Valid email is required');
      return false;
    }
    return true;
  }, []); // No dependencies needed since we're using a ref

  // Save shop
  const handleSave = async () => {
    try {
      console.log('🚨 SAVE BUTTON PRESSED - handleSave function called');
      console.log('💾 Starting save process...');
      console.log('💾 Current shop state:', JSON.stringify(shop, null, 2));
      console.log('💾 FormValues current state:', JSON.stringify(formValues.current, null, 2));
      console.log('💾 Shop images in state:', shop.images);
      console.log('💾 Shop logo_url in state:', shop.logo_url);
      console.log('💾 Images array length:', (shop.images || []).length);
      console.log('💾 Images array contents:', shop.images);
      
      // Check if any images are actually selected
      const hasImages = shop.images && shop.images.length > 0 && shop.images.some(img => img && img.trim() !== '');
      const hasLogo = shop.logo_url && shop.logo_url.trim() !== '';
      console.log('💾 Has images:', hasImages);
      console.log('💾 Has logo:', hasLogo);
      
      if (!hasImages && !hasLogo) {
        console.log('ℹ️ No images or logo provided - shop will be created without images');
      } else {
        console.log('✅ Images detected, proceeding with upload...');
      }

      // Check storage connection before proceeding (but don't block shop creation)
      console.log('🧪 Testing storage connection before upload...');
      const storageTest = await integratedShopService.setupStorage();
      console.log('🧪 Storage test result:', storageTest);
      console.log('🧪 Storage test success:', storageTest.success);
      console.log('🧪 Storage test error:', storageTest.error);
      
      // Also try verifying with integrated service
      console.log('🧪 Testing with integrated service...');
      const integratedTest = await integratedShopService.verifySetup();
      console.log('🧪 Integrated verification result:', integratedTest);
      
      // Try to initialize schema/storage if needed
      if (!storageTest.success && !integratedTest.success) {
        console.log('🔧 Both storage tests failed, trying to initialize...');
        const initResult = await integratedShopService.initializeSchema();
        console.log('🔧 Schema initialization result:', initResult);
      }
      
      // Determine storage availability - prioritize storage accessibility over bucket existence
      let storageAvailable = false;
      
      // Check if storage is accessible (even if buckets are missing)
      if (storageTest.success && storageTest.data?.storage_accessible) {
        console.log('✅ Storage is accessible, uploads will be attempted');
        storageAvailable = true;
        
        // Log bucket status for debugging
        if (storageTest.data.shop_images_bucket && storageTest.data.user_avatars_bucket) {
          console.log('✅ All required buckets exist');
        } else {
          console.warn('⚠️ Some buckets are missing but storage is accessible');
          console.warn('⚠️ Upload attempts will be made - create buckets manually if needed');
        }
      } else if (integratedTest.success && integratedTest.data?.storage_buckets) {
        console.log('✅ Integrated service reports storage buckets are available');
        storageAvailable = true;
      } else {
        console.warn('⚠️ Storage not accessible');
        console.warn('⚠️ Storage test:', storageTest.error);
        console.warn('⚠️ Integrated test:', integratedTest.error);
        console.warn('⚠️ Shop will be created but images cannot be uploaded to Supabase');
        console.warn('⚠️ To fix: Run storage_setup_user_safe.sql in Supabase SQL Editor');
        storageAvailable = false;
      }
    
    // Force a longer delay and multiple state checks to ensure synchronization
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Force React to flush any pending state updates
    await new Promise(resolve => {
      setShop(prevShop => {
        console.log('🔄 Forcing state flush - current name:', prevShop.name);
        return prevShop; // No change, just force a re-render
      });
      setTimeout(resolve, 100);
    });
    
    // Re-check the current shop state before validation
    console.log('Current shop state before validation:', {
      name: shop.name,
      nameLength: shop.name?.length || 0,
      trimmedName: shop.name?.trim() || '',
      trimmedLength: shop.name?.trim()?.length || 0
    });
    
    console.log('🔍 About to call validateBasicInfo...');
    try {
      const validationResult = validateBasicInfo();
      console.log('✅ Validation result:', validationResult);
      if (!validationResult) {
        console.log('❌ Validation failed, returning early');
        return;
      }
    } catch (validationError) {
      console.error('❌ Validation threw error:', validationError);
      Alert.alert('Validation Error', 'Failed to validate shop data: ' + (validationError.message || 'Unknown error'));
      return;
    }
    
    // Get the latest shop state (in case of async state updates)
    const currentShop = await new Promise<typeof shop>(resolve => {
      setShop(prevShop => {
        resolve(prevShop);
        return prevShop;
      });
    });
    
    console.log('🔍 Current shop state at validation:', {
      logo_url: currentShop.logo_url,
      images: currentShop.images
    });
    
    // Validate that at least one image is provided
    const isValidImageUrl = (url: string | undefined | null): boolean => {
      if (!url || typeof url !== 'string') return false;
      const trimmed = url.trim();
      if (trimmed === '') return false;
      // Accept both local file URIs and HTTP URLs (for existing shops)
      // Note: iOS uses file:/// (three slashes) for local files
      return trimmed.startsWith('file://') || trimmed.startsWith('http://') || trimmed.startsWith('https://');
    };
    
    const hasValidImages = currentShop.images && currentShop.images.length > 0 && currentShop.images.some(img => isValidImageUrl(img));
    const hasValidLogo = isValidImageUrl(currentShop.logo_url);
    
    console.log('🖼️ Image validation check:');
    console.log('  - Logo URL:', currentShop.logo_url);
    console.log('  - Logo URL type:', typeof currentShop.logo_url);
    console.log('  - Logo URL trimmed:', currentShop.logo_url?.trim());
    console.log('  - Logo valid:', hasValidLogo);
    console.log('  - Images:', currentShop.images);
    console.log('  - Images length:', currentShop.images?.length);
    if (currentShop.images && currentShop.images.length > 0) {
      currentShop.images.forEach((img, i) => {
        const valid = isValidImageUrl(img);
        console.log(`  - Image ${i}: ${img?.substring(0, 50)}... valid: ${valid}`);
      });
    }
    console.log('  - Images valid:', hasValidImages);
    console.log('  - At least one valid image:', hasValidImages || hasValidLogo);
    
    if (!hasValidImages && !hasValidLogo) {
      console.warn('⚠️ NO VALID IMAGES FOUND - but continuing anyway for debugging');
      console.warn('⚠️ This validation is temporarily disabled to debug the issue');
      // Alert.alert(
      //   'Image Required',
      //   'Please add at least one image or logo for your shop.',
      //   [{ text: 'OK' }]
      // );
      // return;
    }
    if (!user?.id) {
      Alert.alert('Error', 'You must be logged in to save a shop');
      return;
    }

    setIsSaving(true);
    
    // Show initial message about what we're doing
    if (hasImages || hasLogo) {
      console.log('📸 Starting image upload process...');
    }
    
    console.log('🖼️ ===== IMAGE UPLOAD DEBUG START =====');
      console.log('🖼️ Preparing to upload images...');
      console.log('🖼️ Current logo URL:', shop.logo_url);
      console.log('🖼️ Current images array:', shop.images);
      console.log('🖼️ Images array length:', shop.images?.length || 0);
      console.log('🖼️ Logo URL type:', typeof shop.logo_url);
      console.log('🖼️ Logo URL starts with file://?', shop.logo_url?.startsWith('file://'));
      
      // Initialize upload progress if there are any images to upload
      // Use currentShop instead of shop to ensure we have the latest state
      const hasLogoToUpload = currentShop.logo_url && currentShop.logo_url.startsWith('file://');
      const localImages = (currentShop.images || []).filter(img => img && img.startsWith('file://'));
      const totalImagesToUpload = (hasLogoToUpload ? 1 : 0) + localImages.length;
      
      // Debug: Check if images are properly stored
      console.log('🔍 DETAILED IMAGE DEBUG:');
      console.log('  - shop.logo_url value:', JSON.stringify(shop.logo_url));
      console.log('  - shop.logo_url type:', typeof shop.logo_url);
      console.log('  - shop.images value:', JSON.stringify(shop.images));
      console.log('  - shop.images type:', typeof shop.images);
      console.log('  - shop.images is array:', Array.isArray(shop.images));
      
      if (shop.images && Array.isArray(shop.images)) {
        shop.images.forEach((img, index) => {
          console.log(`  - Image ${index}: "${img}" (type: ${typeof img}, starts with file://${img?.startsWith?.('file://')}))`);
        });
      }
      
      if (shop.logo_url) {
        console.log(`  - Logo: "${shop.logo_url}" (type: ${typeof shop.logo_url}, starts with file://${shop.logo_url?.startsWith?.('file://')}))`);
      }
      
      // Force show what we should upload
      Alert.alert('Debug Images', `OLD shop.logo_url: ${shop.logo_url}\n\nNEW currentShop.logo_url: ${currentShop.logo_url}\n\nOLD shop.images: ${JSON.stringify(shop.images)}\n\nNEW currentShop.images: ${JSON.stringify(currentShop.images)}\n\nShould upload: ${totalImagesToUpload} images`);
      
      if (totalImagesToUpload > 0) {
        console.log('📊 Initializing upload progress...');
        console.log('📊 Total images to upload:', totalImagesToUpload);
        console.log('📊 Has logo to upload:', hasLogoToUpload);
        console.log('📊 Local images count:', localImages.length);
        
        setUploadProgress({
          isUploading: true,
          currentImage: 0,
          totalImages: totalImagesToUpload,
          currentImageName: '',
          uploadedImages: 0,
          message: `Starting upload of ${totalImagesToUpload} image(s)...`
        });
        
        console.log('📊 Upload progress state set - progress bar should now be visible');
        
        // Small delay to show the initial progress
        await new Promise(resolve => setTimeout(resolve, 500));
      } else {
        console.log('📊 No upload progress needed:');
        console.log('   - Total images to upload:', totalImagesToUpload);
        console.log('   - Storage available:', storageAvailable);
      }
      
      // Check each image in the array
      if (shop.images && shop.images.length > 0) {
        shop.images.forEach((img, index) => {
          console.log(`🖼️ Image ${index}:`, img, 'Type:', typeof img, 'Starts with file://?', img?.startsWith('file://'));
        });
      } else {
        console.log('🖼️ No images in array to upload');
      }
      
      // Upload logo if it's a local URI (and storage is available)
      let uploadedLogoUrl = currentShop.logo_url;
      if (currentShop.logo_url && currentShop.logo_url.startsWith('file://')) {
        if (storageAvailable) {
          console.log('📸 Uploading shop logo...');
          console.log('📸 Logo local URI:', currentShop.logo_url);
          
          // Update progress for logo upload
          setUploadProgress(prev => ({
            ...prev,
            currentImage: 1,
            currentImageName: 'Logo',
            message: 'Uploading shop logo...'
          }));
          
          const logoResult = await integratedShopService.uploadImage(currentShop.logo_url, 'shops/logos');
          console.log('📸 Logo upload result:', logoResult);
          
          if (logoResult.success && logoResult.data) {
            uploadedLogoUrl = logoResult.data;
            console.log('✅ Logo uploaded successfully:', uploadedLogoUrl);
            console.log('✅ Logo URL length:', uploadedLogoUrl.length);
            
            // Update progress - logo completed
            setUploadProgress(prev => ({
              ...prev,
              uploadedImages: 1,
              message: '✅ Logo uploaded successfully!'
            }));
          } else {
            console.error('❌ Failed to upload logo:', logoResult.error);
            console.warn('⚠️ Creating shop without logo due to upload failure');
            uploadedLogoUrl = ''; // Set to empty string instead of keeping local URI
            
            // Update progress - logo failed
            setUploadProgress(prev => ({
              ...prev,
              message: '❌ Logo upload failed: ' + (logoResult.error || 'Unknown error')
            }));
          }
        } else {
          console.warn('⚠️ Storage not available, skipping logo upload');
          uploadedLogoUrl = '';
        }
      } else if (currentShop.logo_url && !currentShop.logo_url.startsWith('http')) {
        console.log('ℹ️ Logo URL exists but is not a valid URI, clearing it');
        uploadedLogoUrl = '';
      } else {
        console.log('ℹ️ No logo to upload or already uploaded');
      }
      
      // Upload shop images that are local URIs
      let uploadedImageUrls: string[] = [];
      const existingImages = (currentShop.images || []).filter(img => img && !img.startsWith('file://'));
      
      console.log(`🖼️ Found ${localImages.length} local images to upload`);
      console.log(`🖼️ Found ${existingImages.length} existing images`);
      
      if (localImages.length > 0) {
        if (storageAvailable) {
          console.log(`📸 Uploading ${localImages.length} shop images...`);
          console.log('📸 Local images to upload:', localImages);
          
          // Use already calculated values
          let uploadedCount = hasLogoToUpload ? 1 : 0; // Start counting from logo if uploaded
          
          // Upload images one by one to show progress
          for (let i = 0; i < localImages.length; i++) {
            const imageUri = localImages[i];
            
            // Update progress for current image
            setUploadProgress(prev => ({
              ...prev,
              currentImage: uploadedCount + 1,
              currentImageName: `Image ${i + 1}`,
              uploadedImages: uploadedCount,
              message: `Uploading image ${i + 1} of ${localImages.length}...`
            }));
            
            console.log(`📸 Uploading image ${i + 1}/${localImages.length}:`, imageUri);
            const imageResult = await integratedShopService.uploadImage(imageUri, 'shops/images');
            
            if (imageResult.success && imageResult.data) {
              uploadedImageUrls.push(imageResult.data);
              uploadedCount++;
              console.log(`✅ Image ${i + 1} uploaded successfully:`, imageResult.data);
              
              // Update progress - image completed
              setUploadProgress(prev => ({
                ...prev,
                uploadedImages: uploadedCount,
                message: `✅ Image ${i + 1} uploaded successfully!`
              }));
            } else {
              console.error(`❌ Failed to upload image ${i + 1}:`, imageResult.error);
              
              // Update progress - image failed
              setUploadProgress(prev => ({
                ...prev,
                message: `❌ Image ${i + 1} failed: ${imageResult.error || 'Unknown error'}`
              }));
            }
            
            // Small delay to show progress
            await new Promise(resolve => setTimeout(resolve, 300));
          }
          
          console.log(`✅ Successfully uploaded ${uploadedImageUrls.length}/${localImages.length} images:`, uploadedImageUrls);
          
          // Final upload completion message
          const totalUploaded = uploadedImageUrls.length + (uploadedLogoUrl && uploadedLogoUrl !== currentShop.logo_url ? 1 : 0);
          if (totalUploaded > 0) {
            setUploadProgress(prev => ({
              ...prev,
              message: `🎉 All uploads complete! ${totalUploaded} image(s) uploaded successfully.`
            }));
            
            // Show completion message briefly
            setTimeout(() => {
              setUploadProgress(prev => ({
                ...prev,
                isUploading: false
              }));
            }, 2000);
          }
        } else {
          console.warn(`⚠️ Storage not available, skipping upload of ${localImages.length} images`);
        }
      } else {
        console.log('ℹ️ No new images to upload');
      }
      
      // Combine existing and newly uploaded images
      const allImages = [...existingImages, ...uploadedImageUrls];
      
      // Use the main image (logo or first shop image) as image_url
      const mainImageUrl = uploadedLogoUrl || allImages[0] || '';
      
      // Validate all image URLs before storing
      const validAllImages = allImages.filter(url => url && url.trim() !== '' && url.startsWith('http'));
      const validLogoUrl = (uploadedLogoUrl && uploadedLogoUrl.startsWith('http')) ? uploadedLogoUrl : '';
      const validMainImageUrl = (mainImageUrl && mainImageUrl.startsWith('http')) ? mainImageUrl : '';
      
      console.log('🖼️ Final image summary:');
      console.log('  - Original logo URL:', uploadedLogoUrl);
      console.log('  - Original all images array:', allImages);
      console.log('  - Original main image URL:', mainImageUrl);
      console.log('🖼️ After validation:');
      console.log('  - Valid logo URL:', validLogoUrl);
      console.log('  - Valid all images array:', validAllImages);
      console.log('  - Valid main image URL for database:', validMainImageUrl);
      console.log('🖼️ Verifying image URLs are valid HTTP URLs:');
      validAllImages.forEach((url, index) => {
        console.log(`  - Valid Image ${index + 1}: ${url} (starts with http: ${url.startsWith('http')})`);
      });
      if (validLogoUrl) {
        console.log(`  - Valid Logo: ${validLogoUrl} (starts with http: ${validLogoUrl.startsWith('http')})`);
      }
      
      // Extract basic business hours for backward compatibility
      const getBusinessHours = (businessHours: any[]) => {
        const mondayHours = businessHours.find(h => h.day === 'Monday');
        return {
          start: mondayHours?.isOpen ? mondayHours.openTime : '09:00',
          end: mondayHours?.isOpen ? mondayHours.closeTime : '17:00'
        };
      };

      const hours = getBusinessHours(currentShop.business_hours || []);

      // Use formValues ref as primary source of truth (consistent with validation)
      // Ensure we have valid data before proceeding
      const safeName = formValues.current.name || currentShop.name || '';
      const safeDescription = formValues.current.description || currentShop.description || '';
      const safeAddress = formValues.current.address || currentShop.address || '';
      const safePhone = formValues.current.phone || currentShop.phone || '';
      const safeEmail = formValues.current.email || currentShop.email || '';
      
      console.log('🛡️ Safe data check:');
      console.log('  - safeName:', `"${safeName}" (length: ${safeName.length})`);
      console.log('  - safeDescription:', `"${safeDescription}" (length: ${safeDescription.length})`);
      console.log('  - safeAddress:', `"${safeAddress}" (length: ${safeAddress.length})`);
      console.log('🏪 Category check:');
      console.log('  - shop.category:', `"${shop.category}"`);
      console.log('  - shop.category type:', typeof shop.category);
      
      const shopData = {
        name: safeName.trim(),
        description: safeDescription.trim(),
        category: currentShop.category || 'Beauty & Wellness',
        address: safeAddress.trim(),
        city: (formValues.current.city || currentShop.city || '').trim(),
        state: (formValues.current.state || currentShop.state || '').trim(),
        country: (formValues.current.country || currentShop.country || 'Sweden').trim(),
        phone: safePhone.trim(),
        email: safeEmail.trim(),
        website_url: currentShop.website_url?.trim() || null,
        image_url: validMainImageUrl,
        business_hours_start: hours.start,
        business_hours_end: hours.end,
        is_active: currentShop.is_active,
        // Enhanced data fields
        logo_url: validLogoUrl,
        images: validAllImages, // Send as array, will be handled properly by auth service
        business_hours: shop.business_hours || [],
        special_days: shop.special_days || [],
        services: shop.services || [],
        staff: shop.staff || [],
        discounts: shop.discounts || [],
        timezone: currentShop.timezone || 'Europe/Stockholm',
        advance_booking_days: currentShop.advance_booking_days || 30,
        slot_duration: currentShop.slot_duration || 60,
        buffer_time: currentShop.buffer_time || 15,
        auto_approval: currentShop.auto_approval ?? true
      };

      console.log('🏪 DEBUGGING: shopData object creation complete');
      console.log('🏪 shopData type:', typeof shopData);
      console.log('🏪 shopData is null:', shopData === null);
      console.log('🏪 shopData is undefined:', shopData === undefined);
      console.log('🏪 shopData keys:', Object.keys(shopData || {}));
      console.log('🏪 Final shop data being sent to database:', JSON.stringify(shopData, null, 2));
      console.log('🧑‍💼 STAFF DEBUG COMPARISON:');
      console.log('  - currentShop.staff length:', currentShop.staff?.length || 0);
      console.log('  - shop.staff length:', shop.staff?.length || 0);
      console.log('  - shop.staff data:', JSON.stringify(shop.staff || [], null, 2));
      console.log('🛠️ SERVICES DEBUG COMPARISON:');
      console.log('  - currentShop.services length:', currentShop.services?.length || 0);
      console.log('  - shop.services length:', shop.services?.length || 0);
      console.log('  - shop.services data:', JSON.stringify(shop.services || [], null, 2));
      console.log('🎯 DISCOUNTS DEBUG COMPARISON:');
      console.log('  - currentShop.discounts length:', currentShop.discounts?.length || 0);
      console.log('  - shop.discounts length:', shop.discounts?.length || 0);
      console.log('  - shop.discounts data:', JSON.stringify(shop.discounts || [], null, 2));
      console.log('📋 BUSINESS HOURS DEBUG (using currentShop):');
      console.log('  - currentShop.business_hours exists:', !!currentShop.business_hours);
      console.log('  - currentShop.business_hours length:', currentShop.business_hours?.length || 0);
      console.log('📋 SPECIAL DAYS DEBUG (using currentShop):');
      console.log('  - currentShop.special_days exists:', !!currentShop.special_days);
      console.log('  - currentShop.special_days length:', currentShop.special_days?.length || 0);
      console.log('🖼️ IMAGE UPLOAD SUMMARY:');
      console.log('  - Images to upload (local):', localImages.length);
      console.log('  - Uploaded image URLs:', uploadedImageUrls);
      console.log('  - Valid all images for DB:', validAllImages);
      console.log('  - Logo URL for DB:', validLogoUrl);
      console.log('  - Main image URL for DB:', validMainImageUrl);
      console.log('🏪 Key fields check:');
      console.log('  - Name:', `"${shopData.name}" (length: ${shopData.name.length})`);
      console.log('  - Description:', `"${shopData.description}" (length: ${shopData.description.length})`);
      console.log('  - Address:', `"${shopData.address}" (length: ${shopData.address.length})`);
      console.log('  - City:', `"${shopData.city}" (length: ${shopData.city.length})`);
      console.log('  - State:', `"${shopData.state}" (length: ${shopData.state.length})`);
      console.log('  - Phone:', `"${shopData.phone}" (length: ${shopData.phone.length})`);
      console.log('  - Email:', `"${shopData.email}" (length: ${shopData.email.length})`);
      console.log('🖼️ Image fields for database:');
      console.log('  - image_url:', `"${shopData.image_url}" (length: ${shopData.image_url?.length || 0})`);
      console.log('  - logo_url:', `"${shopData.logo_url}" (length: ${shopData.logo_url?.length || 0})`);
      console.log('  - images JSON:', shopData.images);

      let result;
      if (isEditing && shop.id) {
        console.log('🔄 Updating existing shop with ID:', shop.id);
        result = await normalizedShopService.updateShop(shop.id, shopData);
      } else {
        console.log('➕ Creating new shop using integrated service');
        console.log('🔍 Pre-call data validation:');
        console.log('  - shopData exists:', !!shopData);
        console.log('  - shopData type:', typeof shopData);
        console.log('  - shopData name exists:', !!shopData?.name);
        console.log('  - shopData name value:', `"${shopData?.name || 'UNDEFINED'}"`);
        console.log('  - shopData name length:', shopData?.name?.length || 0);
        console.log('🏪 Calling integratedShopService.createShop with data:', JSON.stringify(shopData, null, 2));
        
        // Extra safety check
        console.log('🔍 CRITICAL DEBUG: About to check shopData...');
        console.log('🔍 CRITICAL DEBUG: shopData reference:', shopData);
        console.log('🔍 CRITICAL DEBUG: typeof shopData:', typeof shopData);
        console.log('🔍 CRITICAL DEBUG: shopData === null:', shopData === null);
        console.log('🔍 CRITICAL DEBUG: shopData === undefined:', shopData === undefined);
        
        if (!shopData) {
          console.error('🚨 CRITICAL: shopData is falsy:', shopData);
          throw new Error('CRITICAL: shopData is undefined before service call');
        }
        if (!shopData.name || shopData.name.trim() === '') {
          console.error('🚨 CRITICAL: shopData.name is invalid:', shopData.name);
          throw new Error('CRITICAL: shopData.name is empty before service call');
        }
        
        console.log('🔍 FINAL CHECK: About to call createShop with:', shopData);
        console.log('🔍 FINAL CHECK: integratedShopService exists:', !!integratedShopService);
        console.log('🔍 FINAL CHECK: createShop function exists:', !!integratedShopService?.createShop);
        console.log('🔍 FINAL CHECK: createShop function type:', typeof integratedShopService?.createShop);
        
        // Make absolutely sure we have valid data
        console.log('🔍 BEFORE FINAL: shopData is:', shopData);
        console.log('🔍 BEFORE FINAL: shopData type:', typeof shopData);
        console.log('🔍 BEFORE FINAL: shopData truthy:', !!shopData);
        
        if (!shopData) {
          console.error('🚨 CRITICAL: shopData is falsy at final check!');
          throw new Error('shopData became undefined before service call');
        }
        
        // Create a fresh copy to avoid any reference issues
        const finalShopData = { ...shopData };
        console.log('🔍 FINAL CHECK: finalShopData created from spread:', finalShopData);
        console.log('🔍 FINAL CHECK: finalShopData is truthy:', !!finalShopData);
        console.log('🔍 FINAL CHECK: finalShopData.name:', finalShopData.name);
        
        console.log('🔍 REAL CALL: Now calling with normalized service...');
        result = await normalizedShopService.createShop(finalShopData);
        console.log('🏪 NormalizedShopService result:', result);
      }

      if (result.success) {
        // Parse JSON fields back to objects for the app
        const parsedShopData = {
          ...result.data,
          business_hours: typeof result.data.business_hours === 'string' 
            ? JSON.parse(result.data.business_hours) 
            : result.data.business_hours,
          special_days: typeof result.data.special_days === 'string' 
            ? JSON.parse(result.data.special_days) 
            : result.data.special_days,
          staff: typeof result.data.staff === 'string' 
            ? JSON.parse(result.data.staff) 
            : result.data.staff,
          services: typeof result.data.services === 'string' 
            ? JSON.parse(result.data.services) 
            : result.data.services,
          discounts: typeof result.data.discounts === 'string' 
            ? JSON.parse(result.data.discounts) 
            : result.data.discounts,
          images: typeof result.data.images === 'string' 
            ? JSON.parse(result.data.images) 
            : result.data.images,
          // Include the uploaded image URLs
          image_url: validMainImageUrl || result.data.image_url,
          logo_url: validLogoUrl || '',
          images: validAllImages
        };

        // Create detailed success message about images
        let successMessage = isEditing ? 'Shop updated successfully!' : 'Shop created successfully!';
        let imageStatusMessage = '';
        
        // Check image upload status - handle both new and existing images
        // More robust checking for valid image URLs - include both local file URIs and HTTP URLs
        const isValidImageUrl = (url) => {
          if (!url || typeof url !== 'string') return false;
          const trimmed = url.trim();
          if (trimmed === '') return false;
          // Accept both local file URIs and HTTP URLs (for both new and existing images)
          return trimmed.startsWith('file://') || trimmed.startsWith('http://') || trimmed.startsWith('https://') || trimmed.includes('supabase');
        };
        
        const existingImages = shop.images?.filter(img => isValidImageUrl(img)) || [];
        const existingLogo = isValidImageUrl(shop.logo_url) ? 1 : 0;
        const newImages = validAllImages?.length || 0;
        const newLogo = isValidImageUrl(validLogoUrl) ? 1 : 0;
        
        const totalExistingImages = existingImages.length + existingLogo;
        const totalNewImages = newImages + newLogo;
        const totalFinalImages = totalExistingImages + totalNewImages;
        
        console.log('📊 DETAILED Image Upload Summary:');
        console.log('  - Raw shop.images:', shop.images);
        console.log('  - Raw shop.logo_url:', shop.logo_url);
        console.log('  - Filtered existing images:', existingImages);
        console.log('  - Existing logo valid:', existingLogo === 1);
        console.log('  - Total existing images:', totalExistingImages);
        console.log('  - New images uploaded this session:', totalNewImages);
        console.log('  - Total final images:', totalFinalImages);
        console.log('  - Storage available:', storageAvailable);
        console.log('  - Valid all images:', validAllImages);
        console.log('  - Valid logo URL:', validLogoUrl);
        
        // Debug each image URL individually
        if (shop.images && shop.images.length > 0) {
          shop.images.forEach((img, index) => {
            console.log(`  - Image ${index}: "${img}" (valid: ${isValidImageUrl(img)})`);
          });
        }
        if (shop.logo_url) {
          console.log(`  - Logo: "${shop.logo_url}" (valid: ${isValidImageUrl(shop.logo_url)})`);
        }
        
        if (isEditing) {
          // For editing existing shops
          // Fallback: if we can't count properly, check if there are ANY images present
          const hasValidImages = shop.images && shop.images.some(img => isValidImageUrl(img));
          const hasValidLogo = isValidImageUrl(shop.logo_url);
          const hasAnyImages = hasValidImages || hasValidLogo;
          
          if (totalFinalImages === 0 && !hasAnyImages) {
            imageStatusMessage = '\n\nℹ️ Your shop has no images.';
          } else if (totalFinalImages === 0 && hasAnyImages) {
            // Images exist but are already uploaded (HTTP URLs, not file:// URIs)
            const validImageCount = (shop.images?.filter(img => isValidImageUrl(img)).length || 0) + (hasValidLogo ? 1 : 0);
            imageStatusMessage = `\n\n✅ Shop updated! Your shop has ${validImageCount} existing image(s) (already uploaded).`;
          } else if (totalNewImages > 0) {
            imageStatusMessage = `\n\n✅ Shop updated! Total images: ${totalFinalImages} (${totalNewImages} new image(s) added this session)`;
          } else {
            imageStatusMessage = `\n\n✅ Shop updated! Your shop has ${totalFinalImages} image(s).`;
          }
        } else {
          // For creating new shops
          // Check if images were selected but not uploaded due to storage issues
          const hasValidImages = shop.images && shop.images.some(img => isValidImageUrl(img));
          const hasValidLogo = isValidImageUrl(shop.logo_url);
          const hasAnyImages = hasValidImages || hasValidLogo;
          
          if (totalNewImages === 0 && !hasAnyImages) {
            imageStatusMessage = '\n\nℹ️ No images were added to your shop.';
          } else if (totalNewImages === 0 && hasAnyImages) {
            // Images exist but are already uploaded (HTTP URLs, not new file:// URIs)
            const validImageCount = (shop.images?.filter(img => isValidImageUrl(img)).length || 0) + (hasValidLogo ? 1 : 0);
            imageStatusMessage = `\n\n✅ Shop created! ${validImageCount} existing image(s) (already uploaded).`;
          } else {
            imageStatusMessage = `\n\n✅ Shop created with ${totalNewImages} image(s) uploaded successfully!`;
          }
        }
        
        // Add storage status if there were upload issues during this session
        const localImages = shop.images?.filter(img => img && img.startsWith('file://')) || [];
        const localLogo = shop.logo_url && shop.logo_url.startsWith('file://') ? 1 : 0;
        const totalLocalImages = localImages.length + localLogo;
        
        if (totalLocalImages > 0 && totalNewImages < totalLocalImages) {
          if (!storageAvailable) {
            imageStatusMessage += '\n\n💡 Some images could not be uploaded - storage is not properly configured.';
          } else {
            imageStatusMessage += '\n\n💡 Some images failed to upload - check your internet connection.';
          }
        }
        
        const fullMessage = successMessage + imageStatusMessage;
        
        Alert.alert(
          'Success',
          fullMessage,
          [
            {
              text: 'OK',
              onPress: () => {
                if (onSave) {
                  onSave(parsedShopData);
                }
                // Navigate to provider home screen to show the created shop
                navigation.navigate('ProviderTabs', { 
                  screen: 'ProviderHomeTab',
                  params: { 
                    params: { newShop: parsedShopData }
                  }
                });
              }
            }
          ]
        );
      } else {
        Alert.alert('Error', result.error || 'Failed to save shop');
      }
    } catch (error) {
      console.error('🚨 ERROR in handleSave:', error);
      console.error('🚨 Error type:', typeof error);
      console.error('🚨 Error name:', error?.name);
      console.error('🚨 Error message:', error?.message);
      console.error('🚨 Error stack:', error?.stack);
      
      // Check if this is the "Shop data is required" error
      if (error?.message?.includes('Shop data is required') || error?.message?.includes('undefined or null')) {
        Alert.alert('Data Error', 'There was an issue with the shop data. Please check all required fields and try again.');
      } else {
        Alert.alert('Save Error', error instanceof Error ? error.message : 'An unexpected error occurred');
      }
    } finally {
      setIsSaving(false);
      // Reset upload progress
      setUploadProgress({
        isUploading: false,
        currentImage: 0,
        totalImages: 0,
        currentImageName: '',
        uploadedImages: 0,
        message: ''
      });
    }
  };

  // Image picker with explicit type handling
  const pickImage = (type: 'shop' | 'logo') => {
    console.log('🔴 pickImage called with type:', type);
    
    const options: ImagePickerOptions = {
      mediaType: 'photo',
      quality: type === 'logo' ? 0.9 : 0.8, // High quality but compressed
      maxWidth: type === 'logo' ? 512 : 1920,
      maxHeight: type === 'logo' ? 512 : 1080,
      includeBase64: false, // Don't include base64 to save memory
    };

    const handleResponse = async (response: ImagePickerResponse) => {
      console.log('🔄 handleResponse called for type:', type, 'with response:', response);
      if (response.assets && response.assets[0]) {
        const asset = response.assets[0];
        console.log('🔄 Asset found:', asset);
        if (asset.uri) {
          try {
            console.log('🗜️ Compressing image before storing...');
            
            // Skip compression for now and use original URI directly
            const imageUri = asset.uri;
            console.log('✅ Using original image URI:', imageUri);
            console.log('✅ URI starts with file://?', imageUri?.startsWith('file://'));
            console.log('✅ URI length:', imageUri?.length);
            
            if (type === 'logo') {
              console.log('🔄 Setting logo URL:', imageUri);
              setShop(prev => {
                console.log('🔄 Previous logo_url:', prev.logo_url);
                console.log('🔄 New logo_url:', imageUri);
                const updated = { ...prev, logo_url: imageUri };
                console.log('🔄 Updated shop state after logo update:', updated);
                Alert.alert('State Update', `Logo updated to: ${imageUri?.substring(0, 50)}...`);
                return updated;
              });
              
              // Verify state was set (delayed check)
              setTimeout(() => {
                console.log('🔍 State verification - logo_url should now be:', imageUri);
                Alert.alert('State Verification', `Logo should be: ${imageUri?.substring(0, 50)}...`);
              }, 1000);
            } else {
              console.log('🔄 Adding shop image at index:', selectedImageIndex);
              setShop(prev => {
                const newImages = [...(prev.images || [])];
                // Ensure array is long enough
                while (newImages.length <= selectedImageIndex) {
                  newImages.push('');
                }
                newImages[selectedImageIndex] = imageUri;
                console.log('🔄 Previous images:', prev.images);
                console.log('🔄 New images array:', newImages);
                const updated = { ...prev, images: newImages };
                console.log('🔄 Updated shop state after image update:', updated);
                return updated;
              });
              
              // Verify state was set (delayed check)
              setTimeout(() => {
                console.log('🔍 State verification - images should now contain:', imageUri);
              }, 100);
            }
          } catch (error) {
            console.error('❌ Compression error:', error);
            // Fall back to original image
            if (type === 'logo') {
              setShop(prev => ({ ...prev, logo_url: asset.uri! }));
            } else {
              setShop(prev => {
                const newImages = [...(prev.images || [])];
                newImages[selectedImageIndex] = asset.uri!;
                return { ...prev, images: newImages };
              });
            }
          }
        } else {
          console.log('❌ No URI found in asset');
        }
      } else {
        console.log('❌ No assets found in response');
      }
    };

    Alert.alert(
      `Select ${type === 'logo' ? 'Logo' : 'Shop Photo'}`,
      'Choose how you want to select an image',
      [
        { text: 'Camera', onPress: () => launchCamera(options, handleResponse) },
        { text: 'Gallery', onPress: () => launchImageLibrary(options, handleResponse) },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  const handleImageResponse = async (response: ImagePickerResponse) => {
    if (response.assets && response.assets[0]) {
      const asset = response.assets[0];
      if (asset.uri) {
        try {
          if (imageUploadType === 'staff') {
            console.log('🗜️ Compressing staff avatar...');
            
            // Compress avatar image
            const compressionResult = await compressAvatarImage(asset.uri);
            
            if (compressionResult.success && compressionResult.uri) {
              console.log('✅ Staff avatar compressed successfully');
              console.log('✅ Original size:', (compressionResult.originalSize! / 1024 / 1024).toFixed(2), 'MB');
              console.log('✅ Compressed size:', (compressionResult.compressedSize! / 1024 / 1024).toFixed(2), 'MB');
              setStaffForm(prev => ({ ...prev, avatar_url: compressionResult.uri! }));
            } else {
              console.error('❌ Staff avatar compression failed:', compressionResult.error);
              setStaffForm(prev => ({ ...prev, avatar_url: asset.uri! }));
            }
          } else {
            console.log('🗜️ Compressing shop image...');
            
            // Compress shop image
            const compressionResult = await compressShopImage(asset.uri);
            
            if (compressionResult.success && compressionResult.uri) {
              console.log('✅ Shop image compressed successfully');
              setShop(prev => {
                const newImages = [...(prev.images || [])];
                newImages[selectedImageIndex] = compressionResult.uri!;
                return { ...prev, images: newImages };
              });
            } else {
              console.error('❌ Shop image compression failed:', compressionResult.error);
              setShop(prev => {
                const newImages = [...(prev.images || [])];
                newImages[selectedImageIndex] = asset.uri!;
                return { ...prev, images: newImages };
              });
            }
          }
        } catch (error) {
          console.error('❌ Compression error:', error);
          // Fall back to original images
          if (imageUploadType === 'staff') {
            setStaffForm(prev => ({ ...prev, avatar_url: asset.uri! }));
          } else {
            setShop(prev => {
              const newImages = [...(prev.images || [])];
              newImages[selectedImageIndex] = asset.uri!;
              return { ...prev, images: newImages };
            });
          }
        }
      }
    }
  };


  const pickStaffAvatar = () => {
    setImageUploadType('staff');
    const options: ImagePickerOptions = {
      mediaType: 'photo',
      quality: 0.9, // High quality but compressed
      maxWidth: 400,
      maxHeight: 400,
      includeBase64: false, // Don't include base64 to save memory
    };

    Alert.alert(
      'Select Profile Photo',
      'Choose how you want to select a profile image',
      [
        { text: 'Camera', onPress: () => launchCamera(options, handleImageResponse) },
        { text: 'Gallery', onPress: () => launchImageLibrary(options, handleImageResponse) },
        { text: 'Remove', onPress: () => setStaffForm(prev => ({ ...prev, avatar_url: undefined })), style: 'destructive' },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  const pickShopImage = (index: number) => {
    console.log('🔴 pickShopImage called with index:', index);
    
    const options: ImagePickerOptions = {
      mediaType: 'photo',
      quality: 0.8, // High quality but compressed
      maxWidth: 1920,
      maxHeight: 1080,
      includeBase64: false, // Don't include base64 to save memory
    };

    const handleShopImageResponse = async (response: ImagePickerResponse) => {
      console.log('🎯 handleShopImageResponse called with response:', response);
      if (response.assets && response.assets[0]) {
        const asset = response.assets[0];
        console.log('🎯 Asset found:', asset);
        if (asset.uri) {
          try {
            console.log('🗜️ Compressing shop image before storing...');
            
            // Use original image URI directly for now
            const imageUri = asset.uri;
            console.log('✅ Using original shop image URI:', imageUri);
            
            console.log('🎯 Adding shop image at index:', index, 'URI:', imageUri);
            setShop(prev => {
              const newImages = [...(prev.images || [])];
              // Ensure the array is long enough
              while (newImages.length <= index) {
                newImages.push('');
              }
              newImages[index] = imageUri;
              console.log('🎯 Updated images array:', newImages);
              console.log('🎯 Previous shop state images:', prev.images);
              console.log('🎯 New shop state will have images:', newImages);
              const updated = { ...prev, images: newImages };
              console.log('🎯 Complete updated shop state:', updated);
              Alert.alert('Shop Image Update', `Image ${index} updated to: ${imageUri?.substring(0, 50)}...`);
              return updated;
            });
            
            // Verify state was set (delayed check)
            setTimeout(() => {
              Alert.alert('Shop Image Verification', `Image ${index} should be set`);
            }, 1000);
          } catch (error) {
            console.error('❌ Compression error:', error);
            // Fall back to original image
            console.log('🎯 Adding original shop image at index:', index, 'URI:', asset.uri);
            setShop(prev => {
              const newImages = [...(prev.images || [])];
              while (newImages.length <= index) {
                newImages.push('');
              }
              newImages[index] = asset.uri!;
              return { ...prev, images: newImages };
            });
          }
        } else {
          console.log('❌ No URI found in asset');
        }
      } else {
        console.log('❌ No assets found in response');
      }
    };

    Alert.alert(
      'Select Shop Photo',
      'Choose how you want to select an image',
      [
        { text: 'Camera', onPress: () => launchCamera(options, handleShopImageResponse) },
        { text: 'Gallery', onPress: () => launchImageLibrary(options, handleShopImageResponse) },
        { text: 'Remove', onPress: () => removeShopImage(index), style: 'destructive' },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  const removeShopImage = (index: number) => {
    setShop(prev => {
      const newImages = [...(prev.images || [])];
      // Set the specific index to empty string instead of removing the element
      // This keeps the array structure intact for the 5-slot grid
      newImages[index] = '';
      console.log('Removed image at index:', index, 'Updated array:', newImages);
      return { ...prev, images: newImages };
    });
  };

  // Business hours management
  const updateBusinessHours = (day: string, field: keyof BusinessHours, value: any) => {
    setShop(prev => ({
      ...prev,
      business_hours: prev.business_hours.map(hour =>
        hour.day === day ? { ...hour, [field]: value } : hour
      )
    }));
  };

  const openTimePicker = (day: string, type: 'open' | 'close') => {
    const currentHour = shop.business_hours.find(h => h.day === day);
    if (currentHour) {
      const time = type === 'open' ? currentHour.openTime : currentHour.closeTime;
      const [hours, minutes] = time.split(':').map(Number);
      setTempDate(new Date(2024, 0, 1, hours, minutes));
      setEditingTimeSlot({ day, type });
      setShowCustomTimePicker(true);
    }
  };

  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 0; hour < 24; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        slots.push(timeString);
      }
    }
    return slots;
  };

  const selectTime = (timeString: string) => {
    if (editingTimeSlot) {
      const field = editingTimeSlot.type === 'open' ? 'openTime' : 'closeTime';
      updateBusinessHours(editingTimeSlot.day, field, timeString);
    }
    setShowCustomTimePicker(false);
    setEditingTimeSlot(null);
  };

  const handleTimeChange = (event: any, selectedDate?: Date) => {
    setShowTimePicker(false);
    if (selectedDate && editingTimeSlot) {
      const timeString = selectedDate.toTimeString().slice(0, 5);
      const field = editingTimeSlot.type === 'open' ? 'openTime' : 'closeTime';
      updateBusinessHours(editingTimeSlot.day, field, timeString);
    }
    setEditingTimeSlot(null);
  };

  // Special days management
  const openSpecialDayModal = (specialDay?: SpecialDay) => {
    if (specialDay) {
      setEditingSpecialDay(specialDay);
      setSpecialDayForm(specialDay);
    } else {
      setEditingSpecialDay(null);
      setSpecialDayForm({
        date: new Date().toISOString().split('T')[0],
        name: '', type: 'holiday', isOpen: false,
        openTime: '09:00', closeTime: '17:00',
        description: '', recurring: 'none'
      });
    }
    setShowSpecialDayModal(true);
  };

  const saveSpecialDay = () => {
    if (!specialDayForm.name?.trim()) {
      Alert.alert('Error', 'Special day name is required');
      return;
    }
    if (!specialDayForm.date) {
      Alert.alert('Error', 'Date is required');
      return;
    }

    const newSpecialDay: SpecialDay = {
      id: editingSpecialDay?.id || Date.now().toString(),
      name: specialDayForm.name!.trim(),
      date: specialDayForm.date!,
      type: specialDayForm.type!,
      isOpen: specialDayForm.isOpen!,
      openTime: specialDayForm.openTime,
      closeTime: specialDayForm.closeTime,
      description: specialDayForm.description?.trim(),
      recurring: specialDayForm.recurring
    };

    setShop(prev => {
      const specialDays = prev.special_days || [];
      if (editingSpecialDay) {
        return {
          ...prev,
          special_days: specialDays.map(d => d.id === editingSpecialDay.id ? newSpecialDay : d)
        };
      } else {
        return {
          ...prev,
          special_days: [...specialDays, newSpecialDay]
        };
      }
    });

    setShowSpecialDayModal(false);
    setEditingSpecialDay(null);
  };

  const deleteSpecialDay = (dayId: string) => {
    Alert.alert(
      'Delete Special Day',
      'Are you sure you want to delete this special day?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: () => {
            setShop(prev => ({
              ...prev,
              special_days: prev.special_days.filter(d => d.id !== dayId)
            }));
          }
        }
      ]
    );
  };

  // Service management (keeping existing functionality)
  const openServiceModal = (service?: Service) => {
    if (service) {
      setEditingService(service);
      setServiceForm(service);
    } else {
      setEditingService(null);
      setServiceForm({
        name: '', description: '', price: 0, duration: 60,
        category: shop.category, is_active: true
      });
    }
    setShowServiceModal(true);
  };

  const saveService = async () => {
    if (!serviceForm.name?.trim()) {
      Alert.alert('Error', 'Service name is required');
      return;
    }
    if (!serviceForm.price || serviceForm.price <= 0) {
      Alert.alert('Error', 'Service price must be greater than 0');
      return;
    }

    const serviceData = {
      name: serviceForm.name!.trim(),
      description: serviceForm.description || '',
      price: serviceForm.price!,
      duration: serviceForm.duration || 60,
      category: serviceForm.category || shop.category,
      assigned_staff: serviceForm.assigned_staff || [],
      is_active: serviceForm.is_active ?? true
    };

    if (isEditing && shop.id) {
      // For existing shops, save directly to database
      console.log('💾 Saving service to existing shop:', shop.id);
      console.log('💾 Service data being saved:', JSON.stringify(serviceData, null, 2));
      
      try {
        let result;
        if (editingService) {
          console.log('💾 Updating existing service with ID:', editingService.id);
          result = await normalizedShopService.updateService(editingService.id!, serviceData);
        } else {
          console.log('💾 Creating new service for shop ID:', shop.id);
          result = await normalizedShopService.createService(shop.id, serviceData);
          
          // If normalized service fails due to missing tables, fall back to local state
          if (!result.success && result.error?.includes('does not exist')) {
            console.log('⚠️ Normalized tables not available, falling back to local state');
            result = { success: true, data: serviceData };
            
            // Add to local state as fallback
            const newService: Service = {
              id: Date.now().toString(),
              ...serviceData
            };

            setShop(prev => ({
              ...prev,
              services: deduplicateById([...(prev.services || []), newService])
            }));
          }
        }
        
        console.log('💾 Service call result:', JSON.stringify(result, null, 2));
        
        if (result.success) {
          console.log('✅ Service saved successfully');
          // Only refresh from database if it was actually saved to database (not fallback)
          if (!result.error?.includes('does not exist')) {
            await refreshShopData('after-save');
          }
        } else {
          console.error('❌ Failed to save service:', result.error);
          console.error('❌ Full error result:', JSON.stringify(result, null, 2));
          Alert.alert('Error', result.error || 'Failed to save service');
        }
      } catch (error) {
        console.error('❌ Exception in service save:', error);
        Alert.alert('Error', 'An unexpected error occurred while saving service');
      }
    } else {
      // For new shops, add to local state (will be saved when shop is created)
      console.log('📝 Adding service to local state for new shop');
      
      const newService: Service = {
        id: editingService?.id || Date.now().toString(),
        ...serviceData
      };

      setShop(prev => {
        console.log('🔧 SERVICE SAVE: Before local state update');
        console.log('  - Previous services count:', prev.services?.length || 0);
        console.log('  - Adding new service:', newService.name);
        
        const services = prev.services || [];
        let updatedShop;
        if (editingService) {
          updatedShop = {
            ...prev,
            services: services.map(s => s.id === editingService.id ? newService : s)
          };
        } else {
          updatedShop = {
            ...prev,
            services: deduplicateById([...services, newService])
          };
        }
        
        console.log('🔧 SERVICE SAVE: After local state update');
        console.log('  - New services count:', updatedShop.services?.length || 0);
        
        return updatedShop;
      });
    }

    setShowServiceModal(false);
    setEditingService(null);
  };

  const deleteService = (serviceId: string) => {
    Alert.alert(
      'Delete Service',
      'Are you sure you want to delete this service?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            if (isEditing && shop.id) {
              // For existing shops, delete from database
              console.log('🗑️ Deleting service from database:', serviceId);
              
              const result = await normalizedShopService.deleteService(serviceId);
              
              if (result.success) {
                console.log('✅ Service deleted from database successfully');
                // Refresh the complete shop data
                await refreshShopData('after-save');
              } else {
                console.error('❌ Failed to delete service:', result.error);
                Alert.alert('Error', result.error || 'Failed to delete service');
              }
            } else {
              // For new shops, remove from local state
              console.log('🗑️ Removing service from local state:', serviceId);
              setShop(prev => ({
                ...prev,
                services: (prev.services || []).filter(s => s.id !== serviceId)
              }));
            }
          }
        }
      ]
    );
  };

  // Discount management (keeping existing functionality)
  const openDiscountModal = (discount?: Discount) => {
    if (discount) {
      setEditingDiscount(discount);
      setDiscountForm(discount);
    } else {
      setEditingDiscount(null);
      setDiscountForm({
        type: 'percentage', value: 0, description: '',
        start_date: new Date().toISOString().split('T')[0],
        end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        is_active: true, used_count: 0
      });
    }
    setShowDiscountModal(true);
  };

  const saveDiscount = async () => {
    if (!discountForm.description?.trim()) {
      Alert.alert('Error', 'Discount description is required');
      return;
    }
    if (!discountForm.value || discountForm.value <= 0) {
      Alert.alert('Error', 'Discount value must be greater than 0');
      return;
    }

    const discountData = {
      type: discountForm.type!,
      value: discountForm.value!,
      description: discountForm.description!.trim(),
      start_date: discountForm.start_date!,
      end_date: discountForm.end_date!,
      is_active: discountForm.is_active ?? true,
      used_count: discountForm.used_count || 0,
      min_amount: discountForm.min_amount,
      max_discount: discountForm.max_discount,
      usage_limit: discountForm.usage_limit,
      applicable_services: discountForm.applicable_services || [],
      conditions: discountForm.conditions || {}
    };

    if (isEditing && shop.id) {
      // For existing shops, save directly to database
      console.log('💾 Saving discount to existing shop:', shop.id);
      console.log('💾 Discount data being saved:', JSON.stringify(discountData, null, 2));
      
      try {
        let result;
        if (editingDiscount) {
          console.log('💾 Updating existing discount with ID:', editingDiscount.id);
          result = await normalizedShopService.updateDiscount(editingDiscount.id!, discountData);
        } else {
          console.log('💾 Creating new discount for shop ID:', shop.id);
          result = await normalizedShopService.createDiscount(shop.id, discountData);
          
          // If normalized service fails due to missing tables, fall back to local state
          if (!result.success && result.error?.includes('does not exist')) {
            console.log('⚠️ Normalized tables not available, falling back to local state');
            result = { success: true, data: discountData };
            
            // Add to local state as fallback
            const newDiscount: Discount = {
              id: Date.now().toString(),
              ...discountData
            };

            setShop(prev => ({
              ...prev,
              discounts: deduplicateById([...(prev.discounts || []), newDiscount])
            }));
          }
        }
        
        console.log('💾 Discount call result:', JSON.stringify(result, null, 2));
        
        if (result.success) {
          console.log('✅ Discount saved successfully');
          // Only refresh from database if it was actually saved to database (not fallback)
          if (!result.error?.includes('does not exist')) {
            await refreshShopData('after-save');
          }
        } else {
          console.error('❌ Failed to save discount:', result.error);
          console.error('❌ Full error result:', JSON.stringify(result, null, 2));
          Alert.alert('Error', result.error || 'Failed to save discount');
        }
      } catch (error) {
        console.error('❌ Exception in discount save:', error);
        Alert.alert('Error', 'An unexpected error occurred while saving discount');
      }
    } else {
      // For new shops, add to local state (will be saved when shop is created)
      console.log('📝 Adding discount to local state for new shop');
      
      const newDiscount: Discount = {
        id: editingDiscount?.id || Date.now().toString(),
        ...discountData
      };

      setShop(prev => {
        const discounts = prev.discounts || [];
        if (editingDiscount) {
          return {
            ...prev,
            discounts: discounts.map(d => d.id === editingDiscount.id ? newDiscount : d)
          };
        } else {
          return {
            ...prev,
            discounts: deduplicateById([...discounts, newDiscount])
          };
        }
      });
    }

    setShowDiscountModal(false);
    setEditingDiscount(null);
  };

  const deleteDiscount = (discountId: string) => {
    Alert.alert(
      'Delete Discount',
      'Are you sure you want to delete this discount?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            if (isEditing && shop.id) {
              // For existing shops, delete from database
              console.log('🗑️ Deleting discount from database:', discountId);
              
              const result = await normalizedShopService.deleteDiscount(discountId);
              
              if (result.success) {
                console.log('✅ Discount deleted from database successfully');
                // Refresh the complete shop data
                await refreshShopData('after-save');
              } else {
                console.error('❌ Failed to delete discount:', result.error);
                Alert.alert('Error', result.error || 'Failed to delete discount');
              }
            } else {
              // For new shops, remove from local state
              console.log('🗑️ Removing discount from local state:', discountId);
              setShop(prev => ({
                ...prev,
                discounts: (prev.discounts || []).filter(d => d.id !== discountId)
              }));
            }
          }
        }
      ]
    );
  };

  // Staff management
  const openStaffModal = (staff?: Staff) => {
    if (staff) {
      setEditingStaff(staff);
      setStaffForm(staff);
    } else {
      setEditingStaff(null);
      setStaffForm({
        name: '', 
        email: '', 
        phone: '', 
        role: '', 
        specialties: [], 
        bio: '', 
        experience_years: 0, 
        is_active: true,
        avatar_url: undefined
      });
      setNewSpecialty('');
    }
    setShowStaffModal(true);
  };

  const saveStaff = async () => {
    if (!staffForm.name?.trim()) {
      Alert.alert('Error', 'Staff name is required');
      return;
    }
    if (!staffForm.email?.trim() || !staffForm.email.includes('@')) {
      Alert.alert('Error', 'Valid email is required');
      return;
    }

    const staffData = {
      name: staffForm.name!.trim(),
      email: staffForm.email!.trim(),
      phone: staffForm.phone || '',
      role: staffForm.role || '',
      specialties: (staffForm.specialties || []).filter(s => s && s.trim()),
      avatar_url: staffForm.avatar_url,
      bio: staffForm.bio?.trim() || '',
      experience_years: staffForm.experience_years || 0,
      is_active: staffForm.is_active ?? true
    };

    if (isEditing && shop.id) {
      // For existing shops, save directly to database
      console.log('💾 Saving staff to existing shop:', shop.id);
      console.log('💾 Staff data being saved:', JSON.stringify(staffData, null, 2));
      console.log('💾 Is editing existing staff:', !!editingStaff);
      
      try {
        let result;
        if (editingStaff) {
          console.log('💾 Updating existing staff with ID:', editingStaff.id);
          result = await normalizedShopService.updateStaff(editingStaff.id!, staffData);
        } else {
          console.log('💾 Creating new staff for shop ID:', shop.id);
          result = await normalizedShopService.createStaff(shop.id, staffData);
          
          // If normalized service fails due to missing tables, fall back to local state
          if (!result.success && result.error?.includes('does not exist')) {
            console.log('⚠️ Normalized tables not available, falling back to local state');
            result = { success: true, data: staffData };
            
            // Add to local state as fallback
            const newStaff: Staff = {
              id: Date.now().toString(),
              ...staffData
            };

            setShop(prev => ({
              ...prev,
              staff: deduplicateById([...(prev.staff || []), newStaff])
            }));
          }
        }
        
        console.log('💾 Service call result:', JSON.stringify(result, null, 2));
        
        if (result.success) {
          console.log('✅ Staff saved successfully');
          // Only refresh from database if it was actually saved to database (not fallback)
          if (!result.error?.includes('does not exist')) {
            await refreshShopData('after-save');
          }
        } else {
          console.error('❌ Failed to save staff:', result.error);
          console.error('❌ Full error result:', JSON.stringify(result, null, 2));
          Alert.alert('Error', result.error || 'Failed to save staff member');
        }
      } catch (error) {
        console.error('❌ Exception in staff save:', error);
        Alert.alert('Error', 'An unexpected error occurred while saving staff');
      }
    } else {
      // For new shops, add to local state (will be saved when shop is created)
      console.log('📝 Adding staff to local state for new shop');
      
      const newStaff: Staff = {
        id: editingStaff?.id || Date.now().toString(),
        ...staffData
      };

      setShop(prev => {
        console.log('🔧 STAFF SAVE: Before local state update');
        console.log('  - Previous staff count:', prev.staff?.length || 0);
        console.log('  - Adding new staff:', newStaff.name);
        console.log('  - Is editing:', !!editingStaff);
        
        const staff = prev.staff || [];
        let updatedShop;
        if (editingStaff) {
          updatedShop = {
            ...prev,
            staff: staff.map(s => s.id === editingStaff.id ? newStaff : s)
          };
        } else {
          updatedShop = {
            ...prev,
            staff: deduplicateById([...staff, newStaff])
          };
        }
        
        console.log('🔧 STAFF SAVE: After local state update');
        console.log('  - New staff count:', updatedShop.staff?.length || 0);
        console.log('  - Updated staff list:', updatedShop.staff?.map(s => s.name) || []);
        
        return updatedShop;
      });
    }

    setShowStaffModal(false);
    setEditingStaff(null);
  };

  const deleteStaff = (staffId: string) => {
    Alert.alert(
      'Delete Staff Member',
      'Are you sure you want to delete this staff member?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            if (isEditing && shop.id) {
              // For existing shops, delete from database
              console.log('🗑️ Deleting staff from database:', staffId);
              
              const result = await normalizedShopService.deleteStaff(staffId);
              
              if (result.success) {
                console.log('✅ Staff deleted from database successfully');
                // Refresh the complete shop data
                await refreshShopData('after-save');
              } else {
                console.error('❌ Failed to delete staff:', result.error);
                Alert.alert('Error', result.error || 'Failed to delete staff member');
              }
            } else {
              // For new shops, remove from local state
              console.log('🗑️ Removing staff from local state:', staffId);
              setShop(prev => ({
                ...prev,
                staff: (prev.staff || []).filter(s => s.id !== staffId)
              }));
            }
          }
        }
      ]
    );
  };

  const addSpecialty = () => {
    const trimmedSpecialty = newSpecialty.trim();
    if (trimmedSpecialty && !(staffForm.specialties || []).includes(trimmedSpecialty)) {
      setStaffForm(prev => ({
        ...prev,
        specialties: [...(prev.specialties || []).filter(s => s && s.trim()), trimmedSpecialty]
      }));
      setNewSpecialty('');
    }
  };

  const removeSpecialty = (specialty: string) => {
    setStaffForm(prev => ({
      ...prev,
      specialties: (prev.specialties || []).filter(s => s && s.trim() && s !== specialty)
    }));
  };

  const addSuggestedSpecialty = (specialty: string) => {
    if (specialty && specialty.trim() && !(staffForm.specialties || []).includes(specialty)) {
      setStaffForm(prev => ({
        ...prev,
        specialties: [...(prev.specialties || []).filter(s => s && s.trim()), specialty]
      }));
    }
  };

  // Render methods

  const renderTabBar = () => (
    <View style={styles.tabBar}>
      {[
        { id: 'basic', label: 'Basic', icon: 'information-circle-outline' },
        { id: 'schedule', label: 'Schedule', icon: 'calendar-outline' },
        { id: 'staff', label: 'Staff', icon: 'people-outline' },
        { id: 'services', label: 'Services', icon: 'construct-outline' },
        { id: 'discounts', label: 'Discounts', icon: 'pricetag-outline' },
        { id: 'settings', label: 'Settings', icon: 'settings-outline' }
      ].map((tab) => (
        <TouchableOpacity
          key={tab.id}
          style={[styles.tabItem, activeTab === tab.id && styles.activeTabItem]}
          onPress={() => setActiveTab(tab.id as any)}
        >
          <Ionicons 
            name={tab.icon as any} 
            size={18} 
            color={activeTab === tab.id ? '#FFFFFF' : '#6B7280'} 
          />
          <Text style={[
            styles.tabLabel,
            activeTab === tab.id && styles.activeTabLabel
          ]}>
            {tab.label}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );

  const renderBasicInfo = () => (
    <View style={styles.section}>
      {/* Images Section */}
      <View style={styles.imageSection}>
        <Text style={styles.sectionTitle}>Shop Images</Text>
        
        {/* Shop Logo */}
        <View style={styles.logoSection}>
          <Text style={styles.imageLabel}>Shop Logo</Text>
          <TouchableOpacity style={styles.logoContainer} onPress={() => pickImage('logo')}>
            {shop.logo_url ? (
              <Image source={{ uri: shop.logo_url }} style={styles.logoImage} />
            ) : (
              <View style={styles.imagePlaceholder}>
                <Ionicons name="business-outline" size={32} color="#9CA3AF" />
                <Text style={styles.imagePlaceholderText}>Add Logo</Text>
              </View>
            )}
          </TouchableOpacity>
        </View>

        {/* Debug Info */}
        <View style={{ padding: 10, backgroundColor: '#f0f0f0', marginVertical: 10 }}>
          <Text style={{ fontSize: 12, color: '#666', fontWeight: 'bold' }}>
            🔍 Image Debug Info:
          </Text>
          <Text style={{ fontSize: 12, color: '#666' }}>
            Images array length: {(shop.images || []).length}
          </Text>
          <Text style={{ fontSize: 12, color: '#666' }}>
            Logo: {shop.logo_url ? '✅ Set' : '❌ None'}
          </Text>
          <Text style={{ fontSize: 12, color: '#666' }}>
            Compression: ✅ Built-in (80-90% quality, optimized dimensions)
          </Text>
          {(shop.images || []).filter(img => img && img.trim() !== '').length > 0 && (
            <Text style={{ fontSize: 12, color: '#666' }}>
              Shop images: {(shop.images || []).filter(img => img && img.trim() !== '').length} selected
            </Text>
          )}
          
          {/* Test Buttons */}
          <View style={{ flexDirection: 'row', gap: 5 }}>
            <TouchableOpacity 
              style={{
                backgroundColor: '#10B981',
                padding: 8,
                borderRadius: 4,
                marginTop: 10,
                alignItems: 'center',
                flex: 1
              }}
              onPress={() => {
                console.log('🧪 TEST: Current shop state images:', shop.images);
                console.log('🧪 TEST: Current shop state logo:', shop.logo_url);
                console.log('🧪 TEST: Testing fake image URLs...');
                setShop(prev => ({
                  ...prev,
                  logo_url: 'https://fezdmxvqurczeqmqvgzm.supabase.co/storage/v1/object/public/user-avatars//WhatsApp%20Image%202024-08-05%20at%2013.01.37.jpeg',
                  images: ['https://fezdmxvqurczeqmqvgzm.supabase.co/storage/v1/object/public/shop-images//Simulator%20Screenshot%20-%20iPhone%2015%20-%202025-07-27%20at%2000.08.21.png']
                }));
                console.log('🧪 TEST: Set fake URLs, check debug info above');
              }}
            >
              <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>
                🧪 Set Test URLs
              </Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={{
                backgroundColor: '#3B82F6',
                padding: 8,
                borderRadius: 4,
                marginTop: 10,
                alignItems: 'center',
                flex: 1
              }}
              onPress={async () => {
                console.log('🧪 COMPREHENSIVE TEST: Starting...');
                
                // Test 1: Authentication
                console.log('🔐 Testing authentication...');
                const currentUser = await authService.getCurrentUser();
                console.log('🔐 Current user:', currentUser);
                
                // Test 2: Storage
                console.log('🗄️ Testing storage...');
                const storageTest = await integratedShopService.setupStorage();
                console.log('🗄️ Storage test:', storageTest);
                
                // Test 3: Upload a test image
                if (shop.logo_url && shop.logo_url.startsWith('file://')) {
                  console.log('📸 Testing image upload...');
                  const uploadResult = await integratedShopService.uploadImage(shop.logo_url, 'shops/test');
                  console.log('📸 Upload result:', uploadResult);
                }
                
                // Test 4: Create a minimal shop
                console.log('🏪 Testing shop creation...');
                const testShopData = {
                  name: 'Test Shop ' + Date.now(),
                  description: 'Test Description',
                  category: 'Beauty & Wellness',
                  address: 'Test Address',
                  city: 'Test City',
                  state: 'Test State',
                  country: 'Sweden',
                  phone: '1234567890',
                  email: 'test@test.com',
                  logo_url: validAllImages[0] || '',
                  images: validAllImages,
                  image_url: validAllImages[0] || '',
                  business_hours: shop.business_hours || [],
                  services: shop.services || [],
                  staff: shop.staff || [],
                  discounts: shop.discounts || [],
                  special_days: shop.special_days || []
                };
                
                console.log('🏪 Test shop data:', testShopData);
                const createResult = await authService.createProviderBusiness(testShopData);
                console.log('🏪 Create result:', createResult);
                
                if (createResult.success) {
                  Alert.alert('Success!', 'Test shop created successfully');
                } else {
                  Alert.alert('Error', 'Shop creation failed: ' + createResult.error);
                }
              }}
            >
              <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>
                🧪 Full Test
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={{
                backgroundColor: 'orange',
                padding: 5,
                borderRadius: 3,
                margin: 2,
              }}
              onPress={() => {
                console.log('🔍 DEBUG: Current shop state:');
                console.log('  - Shop object:', JSON.stringify(shop, null, 2));
                console.log('  - Logo URL:', shop.logo_url);
                console.log('  - Images array:', shop.images);
                console.log('  - Image count:', shop.images?.length || 0);
                
                const imageInfo = `Logo URL: ${shop.logo_url || 'None'}\n\nImages (${shop.images?.length || 0}):\n${
                  shop.images?.map((img, i) => `${i + 1}. ${img || 'empty'}`).join('\n') || 'No images'
                }`;
                
                Alert.alert('Shop Image State', imageInfo);
              }}
            >
              <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>
                🔍 Debug Test
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={{
                backgroundColor: 'purple',
                padding: 5,
                borderRadius: 3,
                margin: 2,
              }}
              onPress={async () => {
                console.log('🔍 VERIFY DATABASE: Starting integrated verification...');
                
                const verifyResult = await integratedShopService.verifySetup();
                console.log('🔍 Integrated verification result:', verifyResult);
                
                if (verifyResult.success) {
                  Alert.alert('Integrated Setup OK!', verifyResult.message || 'Integrated shop system is working correctly');
                } else {
                  Alert.alert('Integrated Setup Issues', verifyResult.error || 'Integrated setup has issues. Check console for details.');
                }
              }}
            >
              <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>
                🔍 Verify DB
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={{
                backgroundColor: 'orange',
                padding: 5,
                borderRadius: 3,
                margin: 2,
              }}
              onPress={async () => {
                Alert.alert(
                  'Storage Setup Required', 
                  'Automatic bucket creation is disabled due to RLS policy conflicts.\n\nTo fix storage:\n1. Go to Supabase SQL Editor\n2. Run: fix_storage_rls_complete.sql\n3. This will create buckets and fix policies',
                  [
                    { text: 'OK', style: 'default' },
                    { 
                      text: 'Show Console', 
                      onPress: () => {
                        console.log('📋 STORAGE FIX INSTRUCTIONS:');
                        console.log('1. Open Supabase Dashboard');
                        console.log('2. Go to SQL Editor');
                        console.log('3. Run file: fix_storage_rls_complete.sql');
                        console.log('4. This will fix all storage bucket and RLS issues');
                      }
                    }
                  ]
                );
              }}
            >
              <Text style={{ color: 'white', fontSize: 10, fontWeight: 'bold' }}>
                ⚠️ Fix Storage
              </Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Shop Photos Grid */}
        <View style={styles.photosSection}>
          <Text style={styles.imageLabel}>Shop Photos (up to 5)</Text>
          <View style={styles.photosGrid}>
            {[0, 1, 2, 3, 4].map((index) => {
              const imageUrl = shop.images?.[index];
              const hasImage = imageUrl && imageUrl.trim() !== '';
              return (
                <TouchableOpacity
                  key={index}
                  style={styles.photoBox}
                  onPress={() => pickShopImage(index)}
                >
                  {hasImage ? (
                    <Image source={{ uri: imageUrl }} style={styles.photoImage} />
                  ) : (
                    <View style={styles.imagePlaceholder}>
                      <Ionicons name="camera-outline" size={20} color="#9CA3AF" />
                      <Text style={styles.photoPlaceholderText}>Add</Text>
                    </View>
                  )}
                </TouchableOpacity>
              );
            })}
          </View>
        </View>
      </View>

      {/* Basic Information */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Basic Information</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.label}>Shop Name *</Text>
          <TextInput
            ref={shopNameRef}
            style={styles.input}
            value={shop.name}
            onChangeText={(text) => {
              console.log('📝 Shop name onChange called with:', text);
              console.log('📝 Text length:', text.length);
              // Update the ref value immediately
              formValues.current.name = text;
              console.log('📝 Updated formValues.name:', formValues.current.name);
              // Also update state for UI
              setShop(prev => {
                console.log('📝 NAME UPDATE: Previous state name:', prev.name);
                console.log('📝 NAME UPDATE: Previous staff count:', prev.staff?.length || 0);
                const newState = { ...prev, name: text };
                console.log('📝 NAME UPDATE: New state name:', newState.name);
                console.log('📝 NAME UPDATE: New staff count:', newState.staff?.length || 0);
                console.log('📝 NAME UPDATE: Staff preserved?', JSON.stringify(prev.staff) === JSON.stringify(newState.staff));
                return newState;
              });
            }}
            placeholder="Enter shop name"
            placeholderTextColor="#9CA3AF"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Category *</Text>
          <TouchableOpacity 
            style={styles.selectInput}
            onPress={() => setShowCategoryModal(true)}
          >
            <Text style={styles.selectInputText}>{shop.category}</Text>
            <Ionicons name="chevron-down" size={20} color="#6B7280" />
          </TouchableOpacity>
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Description</Text>
          <TextInput
            style={[styles.input, styles.textArea]}
            value={shop.description}
            onChangeText={(text) => {
              console.log('📝 Shop description onChange called with:', text);
              formValues.current.description = text;
              setShop(prev => ({ ...prev, description: text }));
            }}
            placeholder="Describe your shop and services"
            placeholderTextColor="#9CA3AF"
            multiline
            numberOfLines={3}
          />
        </View>
      </View>

      {/* Contact Information */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Contact Information</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.label}>Phone Number *</Text>
          <TextInput
            style={styles.input}
            value={shop.phone}
            onChangeText={(text) => {
              formValues.current.phone = text;
              setShop(prev => ({ ...prev, phone: text }));
            }}
            placeholder="+46 XX XXX XX XX"
            placeholderTextColor="#9CA3AF"
            keyboardType="phone-pad"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Email Address *</Text>
          <TextInput
            style={styles.input}
            value={shop.email}
            onChangeText={(text) => {
              formValues.current.email = text;
              setShop(prev => ({ ...prev, email: text }));
            }}
            placeholder="shop@example.com"
            placeholderTextColor="#9CA3AF"
            keyboardType="email-address"
            autoCapitalize="none"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Website (Optional)</Text>
          <TextInput
            style={styles.input}
            value={shop.website_url}
            onChangeText={(text) => setShop(prev => ({ ...prev, website_url: text }))}
            placeholder="https://yourwebsite.com"
            placeholderTextColor="#9CA3AF"
            keyboardType="url"
            autoCapitalize="none"
          />
        </View>
      </View>

      {/* Address Information */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Address</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.label}>Street Address *</Text>
          <TextInput
            style={styles.input}
            value={shop.address}
            onChangeText={(text) => {
              console.log('🏠 Address onChange called with:', text);
              console.log('🏠 Address text length:', text.length);
              // Update the ref value immediately
              formValues.current.address = text;
              console.log('🏠 Updated formValues.address:', formValues.current.address);
              // Also update state for UI
              setShop(prev => {
                console.log('🏠 Previous address state:', prev.address);
                const newState = { ...prev, address: text };
                console.log('🏠 New address state:', newState.address);
                return newState;
              });
            }}
            placeholder="Street address"
            placeholderTextColor="#9CA3AF"
          />
        </View>

        <View style={styles.row}>
          <View style={[styles.inputGroup, styles.flex1]}>
            <Text style={styles.label}>City *</Text>
            <TextInput
              style={styles.input}
              value={shop.city}
              onChangeText={(text) => {
                formValues.current.city = text;
                setShop(prev => ({ ...prev, city: text }));
              }}
              placeholder="City"
              placeholderTextColor="#9CA3AF"
            />
          </View>

          <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
            <Text style={styles.label}>State/Province</Text>
            <TextInput
              style={styles.input}
              value={shop.state}
              onChangeText={(text) => {
                formValues.current.state = text;
                setShop(prev => ({ ...prev, state: text }));
              }}
              placeholder="State"
              placeholderTextColor="#9CA3AF"
            />
          </View>
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Country</Text>
          <TextInput
            style={styles.input}
            value={shop.country}
            onChangeText={(text) => {
              formValues.current.country = text;
              setShop(prev => ({ ...prev, country: text }));
            }}
            placeholder="Country"
            placeholderTextColor="#9CA3AF"
          />
        </View>
      </View>
    </View>
  );

  const renderScheduleTab = () => (
    <View style={styles.section}>
      {/* Business Hours */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Regular Business Hours</Text>
        
        {(shop.business_hours || []).map((hours) => (
          <View key={hours.day} style={styles.dayRow}>
            <View style={styles.dayInfo}>
              <Text style={styles.dayName}>{hours.day}</Text>
              <Switch
                value={hours.isOpen}
                onValueChange={(value) => updateBusinessHours(hours.day, 'isOpen', value)}
                trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
                thumbColor={hours.isOpen ? '#F59E0B' : '#9CA3AF'}
              />
            </View>
            
            {hours.isOpen && (
              <View style={styles.timeRow}>
                <TouchableOpacity
                  style={styles.timeButton}
                  onPress={() => openTimePicker(hours.day, 'open')}
                >
                  <Ionicons name="time-outline" size={16} color="#6B7280" />
                  <Text style={styles.timeText}>{hours.openTime}</Text>
                </TouchableOpacity>
                
                <Text style={styles.timeSeparator}>to</Text>
                
                <TouchableOpacity
                  style={styles.timeButton}
                  onPress={() => openTimePicker(hours.day, 'close')}
                >
                  <Ionicons name="time-outline" size={16} color="#6B7280" />
                  <Text style={styles.timeText}>{hours.closeTime}</Text>
                </TouchableOpacity>
              </View>
            )}
            
            {!hours.isOpen && (
              <Text style={styles.closedText}>Closed</Text>
            )}
          </View>
        ))}
      </View>

      {/* Special Days */}
      <View style={styles.formSection}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Special Days & Holidays</Text>
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => openSpecialDayModal()}
          >
            <Ionicons name="add" size={20} color="#FFFFFF" />
            <Text style={styles.addButtonText}>Add</Text>
          </TouchableOpacity>
        </View>

        {shop.special_days && shop.special_days.length > 0 ? (
          <FlatList
            data={shop.special_days}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => {
              const typeConfig = SPECIAL_DAY_TYPES.find(t => t.id === item.type);
              return (
                <View style={styles.specialDayCard}>
                  <View style={styles.specialDayHeader}>
                    <View style={[styles.specialDayIcon, { backgroundColor: typeConfig?.color + '20' }]}>
                      <Ionicons 
                        name={typeConfig?.icon as any || 'calendar'} 
                        size={20} 
                        color={typeConfig?.color || '#6B7280'} 
                      />
                    </View>
                    <View style={styles.specialDayInfo}>
                      <Text style={styles.specialDayName}>{item.name}</Text>
                      <Text style={styles.specialDayDate}>
                        {new Date(item.date).toLocaleDateString()}
                        {item.recurring !== 'none' && ` • ${RECURRING_OPTIONS.find(r => r.id === item.recurring)?.name}`}
                      </Text>
                      <Text style={styles.specialDayType}>{typeConfig?.name}</Text>
                    </View>
                    <View style={styles.specialDayActions}>
                      <TouchableOpacity
                        style={styles.actionButton}
                        onPress={() => openSpecialDayModal(item)}
                      >
                        <Ionicons name="create-outline" size={18} color="#F59E0B" />
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={styles.actionButton}
                        onPress={() => deleteSpecialDay(item.id)}
                      >
                        <Ionicons name="trash-outline" size={18} color="#EF4444" />
                      </TouchableOpacity>
                    </View>
                  </View>
                  
                  {item.isOpen && item.openTime && item.closeTime && (
                    <View style={styles.specialDayHours}>
                      <Ionicons name="time-outline" size={14} color="#6B7280" />
                      <Text style={styles.specialDayHoursText}>
                        {item.openTime} - {item.closeTime}
                      </Text>
                    </View>
                  )}
                  
                  {item.description && (
                    <Text style={styles.specialDayDescription}>{item.description}</Text>
                  )}
                </View>
              );
            }}
            scrollEnabled={false}
          />
        ) : (
          <View style={styles.emptyState}>
            <Ionicons name="calendar-outline" size={48} color="#D1D5DB" />
            <Text style={styles.emptyStateTitle}>No Special Days Added</Text>
            <Text style={styles.emptyStateDescription}>
              Add holidays, special hours, or events to keep customers informed
            </Text>
          </View>
        )}
      </View>

      {/* Timezone Selection */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Timezone</Text>
        <TouchableOpacity 
          style={styles.selectInput}
          onPress={() => setShowTimezoneModal(true)}
        >
          <Text style={styles.selectInputText}>{shop.timezone}</Text>
          <Ionicons name="chevron-down" size={20} color="#6B7280" />
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderServices = () => (
    <View style={styles.section}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Services</Text>
        <View style={styles.sectionActions}>
          {isEditing && (
            <TouchableOpacity
              style={styles.refreshButton}
              onPress={refreshShopData}
              disabled={isRefreshing}
            >
              <Ionicons name="refresh" size={18} color="#6B7280" />
            </TouchableOpacity>
          )}
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => openServiceModal()}
          >
            <Ionicons name="add" size={20} color="#FFFFFF" />
            <Text style={styles.addButtonText}>Add Service</Text>
          </TouchableOpacity>
        </View>
      </View>

      {isRefreshing ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#F59E0B" />
          <Text style={styles.loadingText}>Loading services...</Text>
        </View>
      ) : shop.services && shop.services.length > 0 ? (
        <FlatList
          data={shop.services}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.serviceCard}>
              <View style={styles.serviceHeader}>
                <View style={styles.serviceInfo}>
                  <Text style={styles.serviceName}>{item.name}</Text>
                  <Text style={styles.serviceCategory}>{item.category}</Text>
                </View>
                <View style={styles.serviceActions}>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => openServiceModal(item)}
                  >
                    <Ionicons name="create-outline" size={18} color="#F59E0B" />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => deleteService(item.id)}
                  >
                    <Ionicons name="trash-outline" size={18} color="#EF4444" />
                  </TouchableOpacity>
                </View>
              </View>
              
              <Text style={styles.serviceDescription}>{item.description}</Text>
              
              <View style={styles.serviceDetails}>
                <View style={styles.serviceDetail}>
                  <Ionicons name="cash-outline" size={16} color="#10B981" />
                  <Text style={styles.serviceDetailText}>${item.price}</Text>
                </View>
                <View style={styles.serviceDetail}>
                  <Ionicons name="time-outline" size={16} color="#6B7280" />
                  <Text style={styles.serviceDetailText}>{item.duration} min</Text>
                </View>
                <View style={styles.serviceDetail}>
                  <View style={[
                    styles.statusDot,
                    { backgroundColor: item.is_active ? '#10B981' : '#EF4444' }
                  ]} />
                  <Text style={styles.serviceDetailText}>
                    {item.is_active ? 'Active' : 'Inactive'}
                  </Text>
                </View>
              </View>
              
              {item.discount && (
                <View style={styles.discountBadge}>
                  <Ionicons name="pricetag" size={14} color="#F59E0B" />
                  <Text style={styles.discountText}>{item.discount.description}</Text>
                </View>
              )}
            </View>
          )}
          scrollEnabled={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="construct-outline" size={48} color="#D1D5DB" />
          <Text style={styles.emptyStateTitle}>No Services Added</Text>
          <Text style={styles.emptyStateDescription}>
            Add services that your shop offers to attract customers
          </Text>
        </View>
      )}
    </View>
  );

  const renderStaff = () => (
    <View style={styles.section}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Staff Members</Text>
        <View style={styles.sectionActions}>
          {isEditing && (
            <TouchableOpacity
              style={styles.refreshButton}
              onPress={refreshShopData}
              disabled={isRefreshing}
            >
              <Ionicons name="refresh" size={18} color="#6B7280" />
            </TouchableOpacity>
          )}
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => openStaffModal()}
          >
            <Ionicons name="add" size={20} color="#FFFFFF" />
            <Text style={styles.addButtonText}>Add Staff</Text>
          </TouchableOpacity>
        </View>
      </View>

      {isRefreshing ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#F59E0B" />
          <Text style={styles.loadingText}>Loading staff...</Text>
        </View>
      ) : shop.staff && shop.staff.length > 0 ? (
        <FlatList
          data={shop.staff}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.staffCard}>
              <View style={styles.staffHeader}>
                <View style={styles.staffAvatar}>
                  {item.avatar_url ? (
                    <Image source={{ uri: item.avatar_url }} style={styles.avatarImage} />
                  ) : (
                    <Ionicons name="person" size={24} color="#6B7280" />
                  )}
                </View>
                <View style={styles.staffInfo}>
                  <Text style={styles.staffName}>{item.name}</Text>
                  <Text style={styles.staffRole}>{item.role}</Text>
                  <Text style={styles.staffContact}>{item.email}</Text>
                </View>
                <View style={styles.staffActions}>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => openStaffModal(item)}
                  >
                    <Ionicons name="create-outline" size={18} color="#F59E0B" />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => deleteStaff(item.id)}
                  >
                    <Ionicons name="trash-outline" size={18} color="#EF4444" />
                  </TouchableOpacity>
                </View>
              </View>
              
              {item.specialties && item.specialties.length > 0 && (
                <View style={styles.specialties}>
                  <Text style={styles.specialtiesLabel}>Specialties:</Text>
                  <View style={styles.specialtyTags}>
                    {item.specialties.filter(specialty => specialty && specialty.trim()).map((specialty, index) => (
                      <View key={index} style={styles.specialtyTag}>
                        <Text style={styles.specialtyText}>{specialty}</Text>
                      </View>
                    ))}
                  </View>
                </View>
              )}
              
              {item.bio && (
                <Text style={styles.staffBio}>{item.bio}</Text>
              )}
              
              <View style={styles.staffDetails}>
                {item.experience_years && item.experience_years > 0 && (
                  <View style={styles.staffDetail}>
                    <Ionicons name="star-outline" size={16} color="#F59E0B" />
                    <Text style={styles.staffDetailText}>{item.experience_years} years exp.</Text>
                  </View>
                )}
                <View style={styles.staffDetail}>
                  <View style={[
                    styles.statusDot,
                    { backgroundColor: item.is_active ? '#10B981' : '#EF4444' }
                  ]} />
                  <Text style={styles.staffDetailText}>
                    {item.is_active ? 'Active' : 'Inactive'}
                  </Text>
                </View>
              </View>
            </View>
          )}
          scrollEnabled={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="people-outline" size={48} color="#D1D5DB" />
          <Text style={styles.emptyStateTitle}>No Staff Members Added</Text>
          <Text style={styles.emptyStateDescription}>
            Add staff members to assign them to services and manage your team
          </Text>
        </View>
      )}
    </View>
  );

  const renderDiscounts = () => (
    <View style={styles.section}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Discounts & Offers</Text>
        <View style={styles.sectionActions}>
          {isEditing && (
            <TouchableOpacity
              style={styles.refreshButton}
              onPress={refreshShopData}
              disabled={isRefreshing}
            >
              <Ionicons name="refresh" size={18} color="#6B7280" />
            </TouchableOpacity>
          )}
          <TouchableOpacity
            style={styles.addButton}
            onPress={() => openDiscountModal()}
          >
            <Ionicons name="add" size={20} color="#FFFFFF" />
            <Text style={styles.addButtonText}>Add Discount</Text>
          </TouchableOpacity>
        </View>
      </View>

      {isRefreshing ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#F59E0B" />
          <Text style={styles.loadingText}>Loading discounts...</Text>
        </View>
      ) : shop.discounts && shop.discounts.length > 0 ? (
        <FlatList
          data={shop.discounts}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.discountCard}>
              <View style={styles.discountHeader}>
                <View style={styles.discountIcon}>
                  <Ionicons 
                    name={DISCOUNT_TYPES.find(t => t.id === item.type)?.icon as any || 'pricetag'} 
                    size={20} 
                    color="#F59E0B" 
                  />
                </View>
                <View style={styles.discountInfo}>
                  <Text style={styles.discountTitle}>{item.description}</Text>
                  <Text style={styles.discountType}>
                    {DISCOUNT_TYPES.find(t => t.id === item.type)?.name}
                  </Text>
                </View>
                <View style={styles.discountActions}>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => openDiscountModal(item)}
                  >
                    <Ionicons name="create-outline" size={18} color="#F59E0B" />
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => deleteDiscount(item.id)}
                  >
                    <Ionicons name="trash-outline" size={18} color="#EF4444" />
                  </TouchableOpacity>
                </View>
              </View>
              
              <View style={styles.discountDetails}>
                <View style={styles.discountDetail}>
                  <Text style={styles.discountValue}>
                    {item.type === 'percentage' ? `${item.value}%` : `$${item.value}`}
                  </Text>
                  <Text style={styles.discountLabel}>Discount</Text>
                </View>
                <View style={styles.discountDetail}>
                  <Text style={styles.discountValue}>{item.used_count}</Text>
                  <Text style={styles.discountLabel}>Used</Text>
                </View>
                <View style={styles.discountDetail}>
                  <View style={[
                    styles.statusDot,
                    { backgroundColor: item.is_active ? '#10B981' : '#EF4444' }
                  ]} />
                  <Text style={styles.discountLabel}>
                    {item.is_active ? 'Active' : 'Inactive'}
                  </Text>
                </View>
              </View>
              
              <View style={styles.discountPeriod}>
                <Text style={styles.discountPeriodText}>
                  Valid: {new Date(item.start_date).toLocaleDateString()} - {new Date(item.end_date).toLocaleDateString()}
                </Text>
              </View>
            </View>
          )}
          scrollEnabled={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="pricetag-outline" size={48} color="#D1D5DB" />
          <Text style={styles.emptyStateTitle}>No Discounts Created</Text>
          <Text style={styles.emptyStateDescription}>
            Create attractive discounts to boost customer engagement
          </Text>
        </View>
      )}
    </View>
  );

  const renderSettings = () => (
    <View style={styles.section}>
      {/* Booking Settings */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Booking Settings</Text>
        
        <View style={styles.inputGroup}>
          <Text style={styles.label}>Advance Booking Days</Text>
          <TextInput
            style={styles.input}
            value={shop.advance_booking_days.toString()}
            onChangeText={(text) => setShop(prev => ({ 
              ...prev, 
              advance_booking_days: parseInt(text) || 30 
            }))}
            placeholder="30"
            placeholderTextColor="#9CA3AF"
            keyboardType="numeric"
          />
          <Text style={styles.inputHint}>How many days in advance customers can book</Text>
        </View>

        <View style={styles.row}>
          <View style={[styles.inputGroup, styles.flex1]}>
            <Text style={styles.label}>Slot Duration (min)</Text>
            <TextInput
              style={styles.input}
              value={shop.slot_duration.toString()}
              onChangeText={(text) => setShop(prev => ({ 
                ...prev, 
                slot_duration: parseInt(text) || 60 
              }))}
              placeholder="60"
              placeholderTextColor="#9CA3AF"
              keyboardType="numeric"
            />
          </View>

          <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
            <Text style={styles.label}>Buffer Time (min)</Text>
            <TextInput
              style={styles.input}
              value={shop.buffer_time.toString()}
              onChangeText={(text) => setShop(prev => ({ 
                ...prev, 
                buffer_time: parseInt(text) || 15 
              }))}
              placeholder="15"
              placeholderTextColor="#9CA3AF"
              keyboardType="numeric"
            />
          </View>
        </View>
      </View>

      {/* Shop Status */}
      <View style={styles.formSection}>
        <Text style={styles.sectionTitle}>Shop Status</Text>
        
        <View style={styles.switchRow}>
          <View>
            <Text style={styles.switchLabel}>Auto-approve Bookings</Text>
            <Text style={styles.switchDescription}>
              Automatically approve booking requests
            </Text>
          </View>
          <Switch
            value={shop.auto_approval}
            onValueChange={(value) => setShop(prev => ({ ...prev, auto_approval: value }))}
            trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
            thumbColor={shop.auto_approval ? '#F59E0B' : '#9CA3AF'}
          />
        </View>

        <View style={styles.switchRow}>
          <View>
            <Text style={styles.switchLabel}>Shop Active</Text>
            <Text style={styles.switchDescription}>
              Enable to make your shop visible to customers
            </Text>
          </View>
          <Switch
            value={shop.is_active}
            onValueChange={(value) => setShop(prev => ({ ...prev, is_active: value }))}
            trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
            thumbColor={shop.is_active ? '#F59E0B' : '#9CA3AF'}
          />
        </View>
      </View>
    </View>
  );

  // Modal components (keeping existing modals and adding new ones)
  const renderSpecialDayModal = () => (
    <Modal
      visible={showSpecialDayModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowSpecialDayModal(false)}
    >
      <View style={styles.modalOverlay}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.modalKeyboardView}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {editingSpecialDay ? 'Edit Special Day' : 'Add Special Day'}
              </Text>
              <TouchableOpacity onPress={() => setShowSpecialDayModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Name *</Text>
                <TextInput
                  style={styles.input}
                  value={specialDayForm.name}
                  onChangeText={(text) => setSpecialDayForm(prev => ({ ...prev, name: text }))}
                  placeholder="e.g., Christmas Day, Extended Hours"
                  placeholderTextColor="#9CA3AF"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Date *</Text>
                <TouchableOpacity
                  style={styles.input}
                  onPress={() => setShowDatePicker(true)}
                >
                  <Text style={styles.selectInputText}>
                    {specialDayForm.date ? new Date(specialDayForm.date).toLocaleDateString() : 'Select Date'}
                  </Text>
                </TouchableOpacity>
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Type</Text>
                <View style={styles.specialDayTypeGrid}>
                  {SPECIAL_DAY_TYPES.map((type) => (
                    <TouchableOpacity
                      key={type.id}
                      style={[
                        styles.specialDayTypeOption,
                        specialDayForm.type === type.id && styles.selectedSpecialDayType
                      ]}
                      onPress={() => setSpecialDayForm(prev => ({ ...prev, type: type.id as any }))}
                    >
                      <Ionicons 
                        name={type.icon as any} 
                        size={20} 
                        color={specialDayForm.type === type.id ? type.color : '#6B7280'} 
                      />
                      <Text style={[
                        styles.specialDayTypeName,
                        specialDayForm.type === type.id && { color: type.color }
                      ]}>
                        {type.name}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>

              <View style={styles.switchRow}>
                <View>
                  <Text style={styles.switchLabel}>Open on this day</Text>
                  <Text style={styles.switchDescription}>
                    Enable if the shop will be open
                  </Text>
                </View>
                <Switch
                  value={specialDayForm.isOpen}
                  onValueChange={(value) => setSpecialDayForm(prev => ({ ...prev, isOpen: value }))}
                  trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
                  thumbColor={specialDayForm.isOpen ? '#F59E0B' : '#9CA3AF'}
                />
              </View>

              {specialDayForm.isOpen && (
                <View style={styles.row}>
                  <View style={[styles.inputGroup, styles.flex1]}>
                    <Text style={styles.label}>Open Time</Text>
                    <TextInput
                      style={styles.input}
                      value={specialDayForm.openTime}
                      onChangeText={(text) => setSpecialDayForm(prev => ({ ...prev, openTime: text }))}
                      placeholder="09:00"
                      placeholderTextColor="#9CA3AF"
                    />
                  </View>

                  <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
                    <Text style={styles.label}>Close Time</Text>
                    <TextInput
                      style={styles.input}
                      value={specialDayForm.closeTime}
                      onChangeText={(text) => setSpecialDayForm(prev => ({ ...prev, closeTime: text }))}
                      placeholder="17:00"
                      placeholderTextColor="#9CA3AF"
                    />
                  </View>
                </View>
              )}

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Recurring</Text>
                <FlatList
                  data={RECURRING_OPTIONS}
                  horizontal
                  showsHorizontalScrollIndicator={false}
                  keyExtractor={(item) => item.id}
                  renderItem={({ item }) => (
                    <TouchableOpacity
                      style={[
                        styles.recurringOption,
                        specialDayForm.recurring === item.id && styles.selectedRecurringOption
                      ]}
                      onPress={() => setSpecialDayForm(prev => ({ ...prev, recurring: item.id as any }))}
                    >
                      <Text style={[
                        styles.recurringOptionText,
                        specialDayForm.recurring === item.id && styles.selectedRecurringOptionText
                      ]}>
                        {item.name}
                      </Text>
                    </TouchableOpacity>
                  )}
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Description (Optional)</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={specialDayForm.description}
                  onChangeText={(text) => setSpecialDayForm(prev => ({ ...prev, description: text }))}
                  placeholder="Additional notes or details"
                  placeholderTextColor="#9CA3AF"
                  multiline
                  numberOfLines={3}
                />
              </View>
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowSpecialDayModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.saveModalButton}
                onPress={saveSpecialDay}
              >
                <Text style={styles.saveModalButtonText}>
                  {editingSpecialDay ? 'Update' : 'Add'} Special Day
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </View>
    </Modal>
  );

  // Keep existing modals but add new ones
  const renderCategoryModal = () => (
    <Modal
      visible={showCategoryModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowCategoryModal(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Select Category</Text>
            <TouchableOpacity onPress={() => setShowCategoryModal(false)}>
              <Ionicons name="close" size={24} color="#6B7280" />
            </TouchableOpacity>
          </View>
          
          <FlatList
            data={SERVICE_CATEGORIES}
            keyExtractor={(item) => item}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={[
                  styles.categoryOption,
                  shop.category === item && styles.selectedCategoryOption
                ]}
                onPress={() => {
                  setShop(prev => ({ ...prev, category: item }));
                  setShowCategoryModal(false);
                }}
              >
                <Text style={[
                  styles.categoryOptionText,
                  shop.category === item && styles.selectedCategoryOptionText
                ]}>
                  {item}
                </Text>
                {shop.category === item && (
                  <Ionicons name="checkmark" size={20} color="#F59E0B" />
                )}
              </TouchableOpacity>
            )}
          />
        </View>
      </View>
    </Modal>
  );

  const renderTimezoneModal = () => (
    <Modal
      visible={showTimezoneModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowTimezoneModal(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Select Timezone</Text>
            <TouchableOpacity onPress={() => setShowTimezoneModal(false)}>
              <Ionicons name="close" size={24} color="#6B7280" />
            </TouchableOpacity>
          </View>
          
          <FlatList
            data={TIMEZONES}
            keyExtractor={(item) => item}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={[
                  styles.categoryOption,
                  shop.timezone === item && styles.selectedCategoryOption
                ]}
                onPress={() => {
                  setShop(prev => ({ ...prev, timezone: item }));
                  setShowTimezoneModal(false);
                }}
              >
                <Text style={[
                  styles.categoryOptionText,
                  shop.timezone === item && styles.selectedCategoryOptionText
                ]}>
                  {item}
                </Text>
                {shop.timezone === item && (
                  <Ionicons name="checkmark" size={20} color="#F59E0B" />
                )}
              </TouchableOpacity>
            )}
          />
        </View>
      </View>
    </Modal>
  );

  const renderServiceModal = () => (
    <Modal
      visible={showServiceModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowServiceModal(false)}
    >
      <View style={styles.modalOverlay}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.modalKeyboardView}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {editingService ? 'Edit Service' : 'Add Service'}
              </Text>
              <TouchableOpacity onPress={() => setShowServiceModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Service Name *</Text>
                <TextInput
                  style={styles.input}
                  value={serviceForm.name}
                  onChangeText={(text) => setServiceForm(prev => ({ ...prev, name: text }))}
                  placeholder="e.g., Haircut, Massage, Repair"
                  placeholderTextColor="#9CA3AF"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Description</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={serviceForm.description}
                  onChangeText={(text) => setServiceForm(prev => ({ ...prev, description: text }))}
                  placeholder="Describe what this service includes"
                  placeholderTextColor="#9CA3AF"
                  multiline
                  numberOfLines={3}
                />
              </View>

              <View style={styles.row}>
                <View style={[styles.inputGroup, styles.flex1]}>
                  <Text style={styles.label}>Price ($) *</Text>
                  <TextInput
                    style={styles.input}
                    value={serviceForm.price?.toString()}
                    onChangeText={(text) => setServiceForm(prev => ({ 
                      ...prev, 
                      price: parseFloat(text) || 0 
                    }))}
                    placeholder="25.00"
                    placeholderTextColor="#9CA3AF"
                    keyboardType="numeric"
                  />
                </View>

                <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
                  <Text style={styles.label}>Duration (min)</Text>
                  <TextInput
                    style={styles.input}
                    value={serviceForm.duration?.toString()}
                    onChangeText={(text) => setServiceForm(prev => ({ 
                      ...prev, 
                      duration: parseInt(text) || 60 
                    }))}
                    placeholder="60"
                    placeholderTextColor="#9CA3AF"
                    keyboardType="numeric"
                  />
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Category</Text>
                <TextInput
                  style={styles.input}
                  value={serviceForm.category}
                  onChangeText={(text) => setServiceForm(prev => ({ ...prev, category: text }))}
                  placeholder="Service category"
                  placeholderTextColor="#9CA3AF"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Assign Staff</Text>
                <View style={styles.staffSelection}>
                  {shop.staff && shop.staff.length > 0 ? (
                    shop.staff.map((staff) => (
                      <TouchableOpacity
                        key={staff.id}
                        style={[
                          styles.staffOption,
                          serviceForm.assigned_staff?.includes(staff.id) && styles.selectedStaffOption
                        ]}
                        onPress={() => {
                          const assignedStaff = serviceForm.assigned_staff || [];
                          if (assignedStaff.includes(staff.id)) {
                            setServiceForm(prev => ({
                              ...prev,
                              assigned_staff: assignedStaff.filter(id => id !== staff.id)
                            }));
                          } else {
                            setServiceForm(prev => ({
                              ...prev,
                              assigned_staff: [...assignedStaff, staff.id]
                            }));
                          }
                        }}
                      >
                        <View style={styles.staffOptionContent}>
                          <Text style={[
                            styles.staffOptionName,
                            serviceForm.assigned_staff?.includes(staff.id) && styles.selectedStaffOptionText
                          ]}>
                            {staff.name}
                          </Text>
                          <Text style={styles.staffOptionRole}>{staff.role}</Text>
                        </View>
                        {serviceForm.assigned_staff?.includes(staff.id) && (
                          <Ionicons name="checkmark-circle" size={20} color="#F59E0B" />
                        )}
                      </TouchableOpacity>
                    ))
                  ) : (
                    <Text style={styles.noStaffText}>No staff members available. Add staff first in the Staff tab.</Text>
                  )}
                </View>
              </View>

              <View style={styles.switchRow}>
                <View>
                  <Text style={styles.switchLabel}>Active Service</Text>
                  <Text style={styles.switchDescription}>
                    Enable to make this service bookable
                  </Text>
                </View>
                <Switch
                  value={serviceForm.is_active}
                  onValueChange={(value) => setServiceForm(prev => ({ ...prev, is_active: value }))}
                  trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
                  thumbColor={serviceForm.is_active ? '#F59E0B' : '#9CA3AF'}
                />
              </View>
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowServiceModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.saveModalButton}
                onPress={saveService}
              >
                <Text style={styles.saveModalButtonText}>
                  {editingService ? 'Update' : 'Add'} Service
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </View>
    </Modal>
  )

  const renderDiscountModal = () => (
    <Modal
      visible={showDiscountModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowDiscountModal(false)}
    >
      <View style={styles.modalOverlay}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.modalKeyboardView}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {editingDiscount ? 'Edit Discount' : 'Add Discount'}
              </Text>
              <TouchableOpacity onPress={() => setShowDiscountModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Discount Description *</Text>
                <TextInput
                  style={styles.input}
                  value={discountForm.description}
                  onChangeText={(text) => setDiscountForm(prev => ({ ...prev, description: text }))}
                  placeholder="e.g., 20% off all services, Buy 2 Get 1 Free"
                  placeholderTextColor="#9CA3AF"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Discount Type</Text>
                <View style={styles.discountTypeGrid}>
                  {DISCOUNT_TYPES.map((type) => (
                    <TouchableOpacity
                      key={type.id}
                      style={[
                        styles.discountTypeOption,
                        discountForm.type === type.id && styles.selectedDiscountType
                      ]}
                      onPress={() => setDiscountForm(prev => ({ ...prev, type: type.id as any }))}
                    >
                      <Ionicons 
                        name={type.icon as any} 
                        size={20} 
                        color={discountForm.type === type.id ? '#F59E0B' : '#6B7280'} 
                      />
                      <Text style={[
                        styles.discountTypeName,
                        discountForm.type === type.id && styles.selectedDiscountTypeName
                      ]}>
                        {type.name}
                      </Text>
                      <Text style={styles.discountTypeDesc}>{type.description}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>

              <View style={styles.row}>
                <View style={[styles.inputGroup, styles.flex1]}>
                  <Text style={styles.label}>Value *</Text>
                  <TextInput
                    style={styles.input}
                    value={discountForm.value?.toString()}
                    onChangeText={(text) => setDiscountForm(prev => ({ 
                      ...prev, 
                      value: parseFloat(text) || 0 
                    }))}
                    placeholder={discountForm.type === 'percentage' ? '20' : '10.00'}
                    placeholderTextColor="#9CA3AF"
                    keyboardType="numeric"
                  />
                </View>

                <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
                  <Text style={styles.label}>Usage Limit</Text>
                  <TextInput
                    style={styles.input}
                    value={discountForm.usage_limit?.toString()}
                    onChangeText={(text) => setDiscountForm(prev => ({ 
                      ...prev, 
                      usage_limit: parseInt(text) || undefined 
                    }))}
                    placeholder="Unlimited"
                    placeholderTextColor="#9CA3AF"
                    keyboardType="numeric"
                  />
                </View>
              </View>

              <View style={styles.row}>
                <View style={[styles.inputGroup, styles.flex1]}>
                  <Text style={styles.label}>Start Date</Text>
                  <TextInput
                    style={styles.input}
                    value={discountForm.start_date}
                    onChangeText={(text) => setDiscountForm(prev => ({ ...prev, start_date: text }))}
                    placeholder="YYYY-MM-DD"
                    placeholderTextColor="#9CA3AF"
                  />
                </View>

                <View style={[styles.inputGroup, styles.flex1, styles.marginLeft]}>
                  <Text style={styles.label}>End Date</Text>
                  <TextInput
                    style={styles.input}
                    value={discountForm.end_date}
                    onChangeText={(text) => setDiscountForm(prev => ({ ...prev, end_date: text }))}
                    placeholder="YYYY-MM-DD"
                    placeholderTextColor="#9CA3AF"
                  />
                </View>
              </View>

              <View style={styles.switchRow}>
                <View>
                  <Text style={styles.switchLabel}>Active Discount</Text>
                  <Text style={styles.switchDescription}>
                    Enable to make this discount available
                  </Text>
                </View>
                <Switch
                  value={discountForm.is_active}
                  onValueChange={(value) => setDiscountForm(prev => ({ ...prev, is_active: value }))}
                  trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
                  thumbColor={discountForm.is_active ? '#F59E0B' : '#9CA3AF'}
                />
              </View>
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowDiscountModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.saveModalButton}
                onPress={saveDiscount}
              >
                <Text style={styles.saveModalButtonText}>
                  {editingDiscount ? 'Update' : 'Add'} Discount
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </View>
    </Modal>
  )

  const renderStaffModal = () => (
    <Modal
      visible={showStaffModal}
      transparent
      animationType="slide"
      onRequestClose={() => setShowStaffModal(false)}
    >
      <View style={styles.modalOverlay}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.modalKeyboardView}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {editingStaff ? 'Edit Staff Member' : 'Add Staff Member'}
              </Text>
              <TouchableOpacity onPress={() => setShowStaffModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              {/* Profile Photo */}
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Profile Photo</Text>
                <View style={styles.avatarUploadSection}>
                  <TouchableOpacity 
                    style={styles.avatarUpload}
                    onPress={pickStaffAvatar}
                  >
                    {staffForm.avatar_url ? (
                      <Image source={{ uri: staffForm.avatar_url }} style={styles.avatarPreview} />
                    ) : (
                      <View style={styles.avatarPlaceholder}>
                        <Ionicons name="camera-outline" size={32} color="#9CA3AF" />
                        <Text style={styles.avatarPlaceholderText}>Add Photo</Text>
                      </View>
                    )}
                  </TouchableOpacity>
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Full Name *</Text>
                <TextInput
                  style={styles.input}
                  value={staffForm.name}
                  onChangeText={(text) => setStaffForm(prev => ({ ...prev, name: text }))}
                  placeholder="Enter full name"
                  placeholderTextColor="#9CA3AF"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Email Address *</Text>
                <TextInput
                  style={styles.input}
                  value={staffForm.email}
                  onChangeText={(text) => setStaffForm(prev => ({ ...prev, email: text }))}
                  placeholder="staff@example.com"
                  placeholderTextColor="#9CA3AF"
                  keyboardType="email-address"
                  autoCapitalize="none"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Phone Number</Text>
                <TextInput
                  style={styles.input}
                  value={staffForm.phone}
                  onChangeText={(text) => setStaffForm(prev => ({ ...prev, phone: text }))}
                  placeholder="+46 XX XXX XX XX"
                  placeholderTextColor="#9CA3AF"
                  keyboardType="phone-pad"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Role/Position</Text>
                <TextInput
                  style={styles.input}
                  value={staffForm.role}
                  onChangeText={(text) => setStaffForm(prev => ({ ...prev, role: text }))}
                  placeholder="e.g., Manager, Technician, Specialist, Cleaner"
                  placeholderTextColor="#9CA3AF"
                />
                <Text style={styles.inputHint}>Enter the job title or role for this staff member</Text>
                
                {/* Role suggestions */}
                <View style={styles.suggestionSection}>
                  <Text style={styles.suggestionLabel}>Quick suggestions:</Text>
                  <View style={styles.suggestionTags}>
                    {ROLE_SUGGESTIONS.map((role) => (
                      <TouchableOpacity
                        key={role}
                        style={styles.suggestionTag}
                        onPress={() => setStaffForm(prev => ({ ...prev, role }))}
                      >
                        <Text style={styles.suggestionTagText}>{role}</Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Specialties</Text>
                
                {/* Add new specialty */}
                <View style={styles.addSpecialtyRow}>
                  <TextInput
                    style={[styles.input, styles.specialtyInput]}
                    value={newSpecialty}
                    onChangeText={setNewSpecialty}
                    placeholder="Enter specialty (e.g., Deep Cleaning, Repair Work)"
                    placeholderTextColor="#9CA3AF"
                    onSubmitEditing={addSpecialty}
                  />
                  <TouchableOpacity
                    style={styles.addSpecialtyButton}
                    onPress={addSpecialty}
                    disabled={!newSpecialty.trim()}
                  >
                    <Ionicons name="add" size={20} color="#FFFFFF" />
                  </TouchableOpacity>
                </View>
                
                {/* Current specialties */}
                {staffForm.specialties && staffForm.specialties.length > 0 && (
                  <View style={styles.currentSpecialties}>
                    <Text style={styles.currentSpecialtiesLabel}>Current Specialties:</Text>
                    <View style={styles.specialtyTags}>
                      {staffForm.specialties.filter(specialty => specialty && specialty.trim()).map((specialty, index) => (
                        <View key={index} style={styles.specialtyTagWithRemove}>
                          <Text style={styles.specialtyText}>{specialty}</Text>
                          <TouchableOpacity
                            style={styles.removeSpecialtyButton}
                            onPress={() => removeSpecialty(specialty)}
                          >
                            <Ionicons name="close" size={16} color="#EF4444" />
                          </TouchableOpacity>
                        </View>
                      ))}
                    </View>
                  </View>
                )}
                
                {/* Specialty suggestions */}
                <View style={styles.suggestionSection}>
                  <Text style={styles.suggestionLabel}>Common specialties:</Text>
                  <View style={styles.suggestionTags}>
                    {SPECIALTY_SUGGESTIONS.filter(s => !(staffForm.specialties || []).includes(s)).map((specialty) => (
                      <TouchableOpacity
                        key={specialty}
                        style={styles.suggestionTag}
                        onPress={() => addSuggestedSpecialty(specialty)}
                      >
                        <Text style={styles.suggestionTagText}>{specialty}</Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>
              </View>

              <View style={styles.row}>
                <View style={[styles.inputGroup, styles.flex1]}>
                  <Text style={styles.label}>Experience (years)</Text>
                  <TextInput
                    style={styles.input}
                    value={staffForm.experience_years ? staffForm.experience_years.toString() : ''}
                    onChangeText={(text) => setStaffForm(prev => ({ 
                      ...prev, 
                      experience_years: parseInt(text) || 0 
                    }))}
                    placeholder="0"
                    placeholderTextColor="#9CA3AF"
                    keyboardType="numeric"
                  />
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Bio (Optional)</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={staffForm.bio}
                  onChangeText={(text) => setStaffForm(prev => ({ ...prev, bio: text }))}
                  placeholder="Brief description about this staff member"
                  placeholderTextColor="#9CA3AF"
                  multiline
                  numberOfLines={3}
                />
              </View>

              <View style={styles.switchRow}>
                <View>
                  <Text style={styles.switchLabel}>Active Staff Member</Text>
                  <Text style={styles.switchDescription}>
                    Enable to make this staff member available for bookings
                  </Text>
                </View>
                <Switch
                  value={staffForm.is_active}
                  onValueChange={(value) => setStaffForm(prev => ({ ...prev, is_active: value }))}
                  trackColor={{ false: '#E5E7EB', true: '#FCD34D' }}
                  thumbColor={staffForm.is_active ? '#F59E0B' : '#9CA3AF'}
                />
              </View>
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowStaffModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.saveModalButton}
                onPress={saveStaff}
              >
                <Text style={styles.saveModalButtonText}>
                  {editingStaff ? 'Update' : 'Add'} Staff
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </View>
    </Modal>
  );

  const renderCustomTimePicker = () => (
    <Modal
      visible={showCustomTimePicker}
      transparent
      animationType="slide"
      onRequestClose={() => setShowCustomTimePicker(false)}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.timePickerModal}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Select Time</Text>
            <TouchableOpacity onPress={() => setShowCustomTimePicker(false)}>
              <Ionicons name="close" size={24} color="#6B7280" />
            </TouchableOpacity>
          </View>
          
          <FlatList
            data={generateTimeSlots()}
            numColumns={4}
            style={styles.timeSlotGrid}
            keyExtractor={(item) => item}
            renderItem={({ item }) => {
              const currentTime = editingTimeSlot ? 
                (editingTimeSlot.type === 'open' ? 
                  shop.business_hours.find(h => h.day === editingTimeSlot.day)?.openTime :
                  shop.business_hours.find(h => h.day === editingTimeSlot.day)?.closeTime
                ) : '';
              
              return (
                <TouchableOpacity
                  style={[
                    styles.timeSlot,
                    currentTime === item && styles.selectedTimeSlot
                  ]}
                  onPress={() => selectTime(item)}
                >
                  <Text style={[
                    styles.timeSlotText,
                    currentTime === item && styles.selectedTimeSlotText
                  ]}>
                    {item}
                  </Text>
                </TouchableOpacity>
              );
            }
          }
          />
        </View>
      </View>
    </Modal>
  );

  // Main component render
  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="dark-content" backgroundColor="#FEFCE8" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#F59E0B" />
          <Text style={styles.loadingText}>Loading shop details...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#FEFCE8" />
      
      {renderTabBar()}
      
      {/* Upload Progress Indicator */}
      {console.log('🎯 Progress bar render check:', {isUploading: uploadProgress.isUploading, totalImages: uploadProgress.totalImages})}
      {uploadProgress.isUploading && (
        <View style={styles.uploadProgressContainer}>
          <View style={styles.uploadProgressHeader}>
            <Text style={styles.uploadProgressTitle}>
              📸 Uploading Images ({uploadProgress.uploadedImages}/{uploadProgress.totalImages})
            </Text>
            <Text style={styles.uploadProgressMessage}>
              {uploadProgress.message}
            </Text>
          </View>
          
          {/* Progress Bar */}
          <View style={styles.progressBarContainer}>
            <View 
              style={[
                styles.progressBar, 
                { 
                  width: `${(uploadProgress.uploadedImages / uploadProgress.totalImages) * 100}%` 
                }
              ]} 
            />
          </View>
          
          {/* Current Image Info */}
          {uploadProgress.currentImageName && (
            <Text style={styles.currentImageText}>
              {uploadProgress.currentImageName}
            </Text>
          )}
        </View>
      )}
      
      <ScrollView 
        style={styles.content}
        showsVerticalScrollIndicator={false}
        keyboardShouldPersistTaps="handled"
      >
        {activeTab === 'basic' && renderBasicInfo()}
        {activeTab === 'schedule' && renderScheduleTab()}
        {activeTab === 'staff' && renderStaff()}
        {activeTab === 'services' && renderServices()}
        {activeTab === 'discounts' && renderDiscounts()}
        {activeTab === 'settings' && renderSettings()}
        
        <View style={styles.bottomSpacing} />
      </ScrollView>

      {/* Date Picker */}
      {showDatePicker && (
        <DateTimePicker
          value={tempDate}
          mode="date"
          display="default"
          onChange={(event, selectedDate) => {
            setShowDatePicker(false);
            if (selectedDate) {
              setSpecialDayForm(prev => ({ 
                ...prev, 
                date: selectedDate.toISOString().split('T')[0] 
              }));
            }
          }}
        />
      )}

      {/* Time Picker */}
      {showTimePicker && (
        <DateTimePicker
          value={tempDate}
          mode="time"
          display="default"
          onChange={handleTimeChange}
        />
      )}
      {/* Modals */}
      {renderCategoryModal()}
      {renderTimezoneModal()}
      {renderSpecialDayModal()}
      {renderServiceModal()}
      {renderDiscountModal()}
      {renderStaffModal()}
      {renderCustomTimePicker()}
    </SafeAreaView>
  )
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  
  // Header Save Button
  headerSaveButton: {
    backgroundColor: '#F59E0B',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 10,
    minWidth: 60,
    justifyContent: 'center',
    alignItems: 'center',
  },
  saveButtonDisabled: {
    opacity: 0.6,
  },
  headerSaveButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },

  // Tab Bar (updated to 6 tabs)
  tabBar: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    paddingVertical: 12,
    paddingHorizontal: 4,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  tabItem: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 2,
    borderRadius: 12,
    marginHorizontal: 1,
  },
  activeTabItem: {
    backgroundColor: '#F59E0B',
    shadowColor: '#F59E0B',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3,
  },
  tabLabel: {
    fontSize: 9,
    fontWeight: '500',
    color: '#6B7280',
    marginTop: 3,
    textAlign: 'center',
  },
  activeTabLabel: {
    color: '#FFFFFF',
    fontWeight: '700',
  },

  // Content
  content: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  section: {
    padding: 20,
    backgroundColor: '#F8FAFC',
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  refreshButton: {
    width: 36,
    height: 36,
    borderRadius: 8,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: '800',
    color: '#1F2937',
    marginBottom: 20,
    letterSpacing: -0.5,
  },
  
  // Forms
  formSection: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  inputGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#F9FAFB',
    borderWidth: 1.5,
    borderColor: '#E5E7EB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    color: '#1F2937',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  textArea: {
    minHeight: 80,
    textAlignVertical: 'top',
  },
  selectInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E5E7EB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  selectInputText: {
    fontSize: 16,
    color: '#1F2937',
  },
  inputHint: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'flex-end',
  },
  flex1: {
    flex: 1,
  },
  marginLeft: {
    marginLeft: 12,
  },

  // Switch
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  switchLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  switchDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },

  // Images
  imageSection: {
    marginBottom: 24,
  },
  logoSection: {
    alignItems: 'center',
    marginBottom: 24,
  },
  logoContainer: {
    width: 120,
    height: 120,
    borderRadius: 60,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  photosSection: {
    marginTop: 16,
  },
  photosGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  photoBox: {
    width: (width - 64) / 3 - 4,
    height: 80,
    borderRadius: 8,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  photoImage: {
    width: '100%',
    height: '100%',
  },
  logoImage: {
    width: '100%',
    height: '100%',
  },
  imageLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  imagePlaceholder: {
    width: '100%',
    height: '100%',
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#E5E7EB',
    borderStyle: 'dashed',
  },
  imagePlaceholderText: {
    fontSize: 11,
    color: '#9CA3AF',
    marginTop: 4,
  },
  photoPlaceholderText: {
    fontSize: 9,
    color: '#9CA3AF',
    marginTop: 2,
  },

  // Business Hours
  dayRow: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.06,
    shadowRadius: 6,
    elevation: 3,
    borderWidth: 1,
    borderColor: '#F1F5F9',
  },
  dayInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  dayName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  timeRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  timeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    gap: 6,
  },
  timeText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
  },
  timeSeparator: {
    fontSize: 14,
    color: '#6B7280',
    fontWeight: '500',
  },
  closedText: {
    fontSize: 14,
    color: '#EF4444',
    fontWeight: '500',
    textAlign: 'right',
  },

  // Special Days
  specialDayCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 4,
    borderWidth: 1,
    borderColor: '#F1F5F9',
  },
  specialDayHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  specialDayIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  specialDayInfo: {
    flex: 1,
  },
  specialDayName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  specialDayDate: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 2,
  },
  specialDayType: {
    fontSize: 12,
    color: '#9CA3AF',
    marginTop: 1,
  },
  specialDayActions: {
    flexDirection: 'row',
  },
  specialDayHours: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginBottom: 6,
  },
  specialDayHoursText: {
    fontSize: 13,
    color: '#6B7280',
  },
  specialDayDescription: {
    fontSize: 13,
    color: '#4B5563',
    fontStyle: 'italic',
  },

  // Special Day Modal
  specialDayTypeGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  specialDayTypeOption: {
    flex: 1,
    minWidth: (width - 64) / 2 - 4,
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: 'transparent',
    alignItems: 'center',
    gap: 6,
  },
  selectedSpecialDayType: {
    borderColor: '#F59E0B',
    backgroundColor: '#FEF3C7',
  },
  specialDayTypeName: {
    fontSize: 12,
    fontWeight: '500',
    color: '#4B5563',
    textAlign: 'center',
  },
  recurringOption: {
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    marginRight: 8,
  },
  selectedRecurringOption: {
    backgroundColor: '#FEF3C7',
  },
  recurringOptionText: {
    fontSize: 13,
    color: '#4B5563',
    fontWeight: '500',
  },
  selectedRecurringOptionText: {
    color: '#92400E',
    fontWeight: '600',
  },

  // Buttons
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F59E0B',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 16,
    shadowColor: '#F59E0B',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 4,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '700',
    marginLeft: 6,
    letterSpacing: 0.3,
  },
  actionButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },

  // Cards (keep existing service and discount card styles)
  serviceCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 4,
    borderWidth: 1,
    borderColor: '#F1F5F9',
  },
  serviceHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  serviceInfo: {
    flex: 1,
  },
  serviceName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  serviceCategory: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 2,
  },
  serviceActions: {
    flexDirection: 'row',
  },
  serviceDescription: {
    fontSize: 14,
    color: '#4B5563',
    marginBottom: 12,
    lineHeight: 20,
  },
  serviceDetails: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  serviceDetail: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  serviceDetailText: {
    fontSize: 13,
    fontWeight: '500',
    color: '#6B7280',
  },
  statusDot: {
    width: 6,
    height: 6,
    borderRadius: 3,
  },
  discountBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FEF3C7',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginTop: 8,
    alignSelf: 'flex-start',
  },
  discountText: {
    fontSize: 12,
    color: '#92400E',
    marginLeft: 4,
    fontWeight: '500',
  },

  // Discount Cards (keep existing styles)
  discountCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 4,
    borderWidth: 1,
    borderColor: '#F1F5F9',
  },
  discountHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  discountIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#FEF3C7',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  discountInfo: {
    flex: 1,
  },
  discountTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  discountType: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 2,
  },
  discountActions: {
    flexDirection: 'row',
  },
  discountDetails: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 20,
    marginBottom: 8,
  },
  discountDetail: {
    alignItems: 'center',
  },
  discountValue: {
    fontSize: 16,
    fontWeight: '700',
    color: '#1F2937',
  },
  discountLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 2,
  },
  discountPeriod: {
    backgroundColor: '#F9FAFB',
    padding: 8,
    borderRadius: 6,
  },
  discountPeriodText: {
    fontSize: 12,
    color: '#6B7280',
  },

  // Empty State
  emptyState: {
    alignItems: 'center',
    padding: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#4B5563',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateDescription: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },

  // Modals
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalKeyboardView: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '90%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
  },
  modalBody: {
    padding: 20,
    maxHeight: 400,
  },
  modalActions: {
    flexDirection: 'row',
    gap: 12,
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: '#F3F4F6',
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#4B5563',
  },
  saveModalButton: {
    flex: 1,
    backgroundColor: '#F59E0B',
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: 'center',
  },
  saveModalButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },

  // Category Modal
  categoryOption: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  selectedCategoryOption: {
    backgroundColor: '#FEF3C7',
  },
  categoryOptionText: {
    fontSize: 16,
    color: '#1F2937',
  },
  selectedCategoryOptionText: {
    fontWeight: '600',
    color: '#92400E',
  },

  // Discount Type Grid
  discountTypeGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  discountTypeOption: {
    flex: 1,
    minWidth: (width - 64) / 2 - 4,
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: 'transparent',
    alignItems: 'center',
    gap: 4,
  },
  selectedDiscountType: {
    borderColor: '#F59E0B',
    backgroundColor: '#FEF3C7',
  },
  discountTypeName: {
    fontSize: 12,
    fontWeight: '500',
    color: '#4B5563',
    textAlign: 'center',
  },
  selectedDiscountTypeName: {
    color: '#92400E',
    fontWeight: '600',
  },
  discountTypeDesc: {
    fontSize: 10,
    color: '#6B7280',
    textAlign: 'center',
  },

  // Staff Cards
  staffCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 4,
    borderWidth: 1,
    borderColor: '#F1F5F9',
  },
  staffHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  staffAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  avatarImage: {
    width: '100%',
    height: '100%',
    borderRadius: 25,
  },
  staffInfo: {
    flex: 1,
  },
  staffName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  staffRole: {
    fontSize: 13,
    color: '#F59E0B',
    fontWeight: '500',
    marginTop: 2,
  },
  staffContact: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 1,
  },
  staffActions: {
    flexDirection: 'row',
  },
  specialties: {
    marginBottom: 12,
  },
  specialtiesLabel: {
    fontSize: 13,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 6,
  },
  specialtyTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 6,
  },
  specialtyTag: {
    backgroundColor: '#FEF3C7',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  specialtyText: {
    fontSize: 11,
    color: '#92400E',
    fontWeight: '500',
  },
  staffBio: {
    fontSize: 13,
    color: '#4B5563',
    lineHeight: 18,
    marginBottom: 12,
    fontStyle: 'italic',
  },
  staffDetails: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  staffDetail: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  staffDetailText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#6B7280',
  },

  // Staff Selection in Service Modal
  staffSelection: {
    gap: 8,
  },
  staffOption: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  selectedStaffOption: {
    borderColor: '#F59E0B',
    backgroundColor: '#FEF3C7',
  },
  staffOptionContent: {
    flex: 1,
  },
  staffOptionName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  selectedStaffOptionText: {
    color: '#92400E',
    fontWeight: '600',
  },
  staffOptionRole: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 2,
  },
  noStaffText: {
    fontSize: 14,
    color: '#6B7280',
    fontStyle: 'italic',
    textAlign: 'center',
    padding: 20,
  },

  // Note: Role and specialty selection styles removed as we now use manual input

  // Custom Time Picker
  timePickerModal: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '70%',
    marginTop: 'auto',
  },
  timeSlotGrid: {
    padding: 20,
    maxHeight: 400,
  },
  timeSlot: {
    flex: 1,
    margin: 4,
    backgroundColor: '#F9FAFB',
    paddingVertical: 12,
    paddingHorizontal: 8,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  selectedTimeSlot: {
    backgroundColor: '#F59E0B',
    borderColor: '#F59E0B',
  },
  timeSlotText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#374151',
  },
  selectedTimeSlotText: {
    color: '#FFFFFF',
    fontWeight: '700',
  },

  // Staff Avatar Upload
  avatarUploadSection: {
    alignItems: 'center',
    marginBottom: 8,
  },
  avatarUpload: {
    width: 100,
    height: 100,
    borderRadius: 50,
    overflow: 'hidden',
    borderWidth: 2,
    borderColor: '#E5E7EB',
    borderStyle: 'dashed',
  },
  avatarPreview: {
    width: '100%',
    height: '100%',
  },
  avatarPlaceholder: {
    width: '100%',
    height: '100%',
    backgroundColor: '#F9FAFB',
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarPlaceholderText: {
    fontSize: 12,
    color: '#9CA3AF',
    marginTop: 4,
  },

  // Specialty Management
  addSpecialtyRow: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    gap: 8,
    marginBottom: 12,
  },
  specialtyInput: {
    flex: 1,
  },
  addSpecialtyButton: {
    backgroundColor: '#F59E0B',
    width: 44,
    height: 44,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  currentSpecialties: {
    marginBottom: 12,
  },
  currentSpecialtiesLabel: {
    fontSize: 13,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  specialtyTagWithRemove: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FEF3C7',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 16,
    gap: 6,
  },
  removeSpecialtyButton: {
    padding: 2,
  },

  // Suggestions
  suggestionSection: {
    marginTop: 8,
  },
  suggestionLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginBottom: 6,
  },
  suggestionTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 6,
  },
  suggestionTag: {
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  suggestionTagText: {
    fontSize: 11,
    color: '#6B7280',
    fontWeight: '500',
  },

  // Loading
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#6B7280',
    marginTop: 12,
  },

  // Bottom spacing
  bottomSpacing: {
    height: 32,
  },

  // Upload Progress Styles
  uploadProgressContainer: {
    backgroundColor: '#F0F9FF',
    borderLeftWidth: 4,
    borderLeftColor: '#3B82F6',
    padding: 16,
    marginHorizontal: 16,
    marginVertical: 8,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  uploadProgressHeader: {
    marginBottom: 12,
  },
  uploadProgressTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1E40AF',
    marginBottom: 4,
  },
  uploadProgressMessage: {
    fontSize: 14,
    color: '#374151',
    fontStyle: 'italic',
  },
  progressBarContainer: {
    height: 8,
    backgroundColor: '#E5E7EB',
    borderRadius: 4,
    overflow: 'hidden',
    marginBottom: 8,
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#3B82F6',
    borderRadius: 4,
    transition: 'width 0.3s ease',
  },
  currentImageText: {
    fontSize: 12,
    color: '#6B7280',
    textAlign: 'center',
    marginTop: 4,
  },
});

export default ShopDetailsScreen;